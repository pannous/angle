!!python/object/apply:collections.defaultdict
args: [!!python/name:__builtin__.list '']
dictitems:
  Abs: [cv]
  AbsDiff: [cv]
  AbsDiffS: [cv]
  Acc: [cv]
  Accessor: [objc]
  AdaptiveThreshold: [cv]
  Add: [cv]
  AddS: [cv]
  AddWeighted: [cv]
  Algorithm__create: [cv2]
  Algorithm_getList: [cv2]
  And: [cv]
  AndS: [cv]
  ApproxChains: [cv]
  ApproxPoly: [cv]
  ArcLength: [cv]
  AuthDescriptorAction: [stem]
  Avg: [cv]
  AvgSdv: [cv]
  BFMatcher: [cv2]
  BOWImgDescriptorExtractor: [cv2]
  BOWKMeansTrainer: [cv2]
  Back: [colorama]
  BackProjectPCA: [cv]
  BackgroundSubtractorMOG: [cv2]
  BackgroundSubtractorMOG2: [cv2]
  BaseExceptions: [mock]
  Binnumber: [tokenize]
  Boost: [cv2]
  BoundingRect: [cv]
  BoxPoints: [cv]
  Bracket: [tokenize]
  BytesIO: [pygments]
  CV_BGR2Lab: [cv]
  CV_BGR2Luv: [cv]
  CV_BGR2YCrCb: [cv]
  CV_BayerBG2BGR: [cv]
  CV_BayerBG2BGR_VNG: [cv]
  CV_BayerBG2RGB: [cv]
  CV_BayerGB2BGR: [cv]
  CV_BayerGB2BGR_VNG: [cv]
  CV_BayerGB2RGB: [cv]
  CV_BayerGR2BGR: [cv]
  CV_BayerGR2BGR_VNG: [cv]
  CV_BayerGR2RGB: [cv]
  CV_BayerRG2BGR: [cv]
  CV_BayerRG2BGR_VNG: [cv]
  CV_BayerRG2RGB: [cv]
  CV_ErrModeLeaf: [cv]
  CV_ErrModeParent: [cv]
  CV_ErrModeSilent: [cv]
  CV_GAUSSIAN_5x5: [cv]
  CV_Lab2BGR: [cv]
  CV_Lab2RGB: [cv]
  CV_Luv2BGR: [cv]
  CV_Luv2RGB: [cv]
  CV_RGB2Lab: [cv]
  CV_RGB2Luv: [cv]
  CV_RGB2YCrCb: [cv]
  CV_YCrCb2BGR: [cv]
  CV_YCrCb2RGB: [cv]
  CalcArrBackProject: [cv]
  CalcArrHist: [cv]
  CalcBackProject: [cv]
  CalcBackProjectPatch: [cv]
  CalcCovarMatrix: [cv]
  CalcEMD2: [cv]
  CalcGlobalOrientation: [cv]
  CalcHist: [cv]
  CalcMotionGradient: [cv]
  CalcOpticalFlowBM: [cv]
  CalcOpticalFlowFarneback: [cv]
  CalcOpticalFlowHS: [cv]
  CalcOpticalFlowLK: [cv]
  CalcOpticalFlowPyrLK: [cv]
  CalcPCA: [cv]
  CalcProbDensity: [cv]
  CalcSubdivVoronoi2D: [cv]
  CalibrateCamera2: [cv]
  CalibrationMatrixValues: [cv]
  CamShift: [cv, cv2]
  Canny: [cv, cv2]
  CaptureFromCAM: [cv]
  CaptureFromFile: [cv]
  CartToPolar: [cv]
  CascadeClassifier: [cv2]
  Category: [objc]
  Cbrt: [cv]
  Ceil: [cv]
  CheckArr: [cv]
  CheckContourConvexity: [cv]
  CircBuildFlag: [stem]
  CircClosureReason: [stem]
  CircEvent: [stem]
  CircPurpose: [stem]
  CircStatus: [stem]
  Circle: [cv]
  ClassTypes: [mock]
  ClearHist: [cv]
  ClearND: [cv]
  ClearSeq: [cv]
  ClearSubdivVoronoi2D: [cv]
  ClipLine: [cv]
  CloneImage: [cv]
  CloneMat: [cv]
  CloneMatND: [cv]
  CloneSeq: [cv]
  Cmp: [cv]
  CmpS: [cv]
  Comment: [tokenize]
  CompareHist: [cv]
  ComputeCorrespondEpilines: [cv]
  ConfigParser: [virtualenv]
  ContStr: [tokenize]
  ContourArea: [cv]
  Convert: [cv]
  ConvertImage: [cv]
  ConvertMaps: [cv]
  ConvertPointsHomogeneous: [cv]
  ConvertScale: [cv]
  ConvertScaleAbs: [cv]
  ConvexHull2: [cv]
  ConvexityDefects: [cv]
  Copy: [cv]
  CopyMakeBorder: [cv]
  CornerEigenValsAndVecs: [cv]
  CornerHarris: [cv]
  CornerMinEigenVal: [cv]
  CountNonZero: [cv]
  CreateCameraCapture: [cv]
  CreateData: [cv]
  CreateFileCapture: [cv]
  CreateHist: [cv]
  CreateImage: [cv]
  CreateImageHeader: [cv]
  CreateKalman: [cv]
  CreateMat: [cv]
  CreateMatHeader: [cv]
  CreateMatND: [cv]
  CreateMatNDHeader: [cv]
  CreateMemStorage: [cv]
  CreatePOSITObject: [cv]
  CreateStereoBMState: [cv]
  CreateStereoGCState: [cv]
  CreateStructuringElementEx: [cv]
  CreateSubdivDelaunay2D: [cv]
  CreateTrackbar: [cv]
  CreateVideoWriter: [cv]
  CrossProduct: [cv]
  Cursor: [colorama]
  CvtColor: [cv]
  CvtPixToPlane: [cv]
  CvtScale: [cv]
  DMatch: [cv2]
  DTree: [cv2]
  Decnumber: [tokenize]
  DecodeImage: [cv]
  DecodeImageM: [cv]
  DecomposeProjectionMatrix: [cv]
  DescriptorExtractor_create: [cv2]
  DescriptorMatcher_create: [cv2]
  DescriptorTypes: [mock]
  DestroyAllWindows: [cv]
  DestroyDB: [leveldb]
  DestroyWindow: [cv]
  Det: [cv]
  Dilate: [cv]
  DistTransform: [cv]
  Div: [cv]
  DotProduct: [cv]
  Double: [tokenize]
  Double3: [tokenize]
  DrawChessboardCorners: [cv]
  DrawContours: [cv]
  ERTrees: [cv2]
  EigenVV: [cv]
  Ellipse: [cv]
  EllipseBox: [cv]
  EncodeImage: [cv]
  EncodedFile: [codecs]
  EnvironmentVariables: [awscli]
  EqualizeHist: [cv]
  Erode: [cv]
  EstimateRigidTransform: [cv]
  Exp: [cv]
  Expfloat: [tokenize]
  Exponent: [tokenize]
  ExtractSURF: [cv]
  False_: [numpy]
  FastArctan: [cv]
  FastFeatureDetector: [cv2]
  Feature2D_create: [cv2]
  FeatureDetector_create: [cv2]
  File: [mutagen]
  FileNode: [cv2]
  FileStorage: [cv2]
  FillConvexPoly: [cv]
  FillPoly: [cv]
  Filter2D: [cv]
  FindChessboardCorners: [cv]
  FindContours: [cv]
  FindCornerSubPix: [cv]
  FindDataMatrix: [cv]
  FindExtrinsicCameraParams2: [cv]
  FindFundamentalMat: [cv]
  FindHomography: [cv]
  FindNearestPoint2D: [cv]
  FindStereoCorrespondenceBM: [cv]
  FindStereoCorrespondenceGC: [cv]
  FitEllipse2: [cv]
  FitLine: [cv]
  FixedOffset: [pytz]
  Flag: [stem]
  FlannBasedMatcher: [cv2]
  Flip: [cv]
  Floatnumber: [tokenize]
  FloodFill: [cv]
  Floor: [cv]
  Fore: [colorama]
  FunctionAttributes: [mock]
  FunctionTypes: [mock]
  FunctionValueCache: [pytools]
  Funny: [tokenize]
  GBTrees: [cv2]
  GFTTDetector: [cv2]
  GSSAuth: [paramiko]
  GaussianBlur: [cv2]
  Get1D: [cv]
  Get2D: [cv]
  Get3D: [cv]
  GetAffineTransform: [cv]
  GetCaptureProperty: [cv]
  GetCentralMoment: [cv]
  GetCol: [cv]
  GetCols: [cv]
  GetDiag: [cv]
  GetDims: [cv]
  GetElemType: [cv]
  GetHuMoments: [cv]
  GetImage: [cv]
  GetImageCOI: [cv]
  GetImageROI: [cv]
  GetMat: [cv]
  GetMinMaxHistValue: [cv]
  GetND: [cv]
  GetNormalizedCentralMoment: [cv]
  GetOptimalDFTSize: [cv]
  GetOptimalNewCameraMatrix: [cv]
  GetPerspectiveTransform: [cv]
  GetQuadrangleSubPix: [cv]
  GetReal1D: [cv]
  GetReal2D: [cv]
  GetReal3D: [cv]
  GetRealND: [cv]
  GetRectSubPix: [cv]
  GetRotationMatrix2D: [cv]
  GetRow: [cv]
  GetRows: [cv]
  GetSize: [cv]
  GetSpatialMoment: [cv]
  GetStarKeypoints: [cv]
  GetSubRect: [cv]
  GetTextSize: [cv]
  GetTickCount: [cv]
  GetTickFrequency: [cv]
  GetTrackbarPos: [cv]
  GetWindowProperty: [cv]
  GoodFeaturesToTrack: [cv]
  GrabCut: [cv]
  GrabFrame: [cv]
  GridAdaptedFeatureDetector: [cv2]
  GuardStatus: [stem]
  GuardType: [stem]
  HOGDescriptor: [cv2]
  HOGDescriptor_getDaimlerPeopleDetector: [cv2]
  HOGDescriptor_getDefaultPeopleDetector: [cv2]
  HOGDetectMultiScale: [cv]
  HaarDetectObjects: [cv]
  Hexnumber: [tokenize]
  HiddenServiceState: [stem]
  HoughCircles: [cv, cv2]
  HoughLines: [cv2]
  HoughLines2: [cv]
  HoughLinesP: [cv2]
  HuMoments: [cv2]
  IBAction: [objc]
  IBOutlet: [objc]
  Ignore: [tokenize]
  Image: [PIL]
  ImageFilter: [PIL]
  ImageMode: [PIL]
  Imagnumber: [tokenize]
  InRange: [cv]
  InRangeS: [cv]
  Inf: [numpy]
  Infinity: [numpy]
  InitFont: [cv]
  InitIntrinsicParams2D: [cv]
  InitLineIterator: [cv]
  InitUndistortMap: [cv]
  InitUndistortRectifyMap: [cv]
  Inpaint: [cv]
  Integral: [cv]
  Intnumber: [tokenize]
  InvSqrt: [cv]
  Invert: [cv]
  IsInf: [cv]
  IsNaN: [cv]
  KDTree: [cv2]
  KMeans2: [cv]
  KNearest: [cv2]
  KalmanCorrect: [cv]
  KalmanFilter: [cv2]
  KalmanPredict: [cv]
  KeyPoint: [cv2]
  LCF_graph: [networkx]
  Laplace: [cv]
  Laplacian: [cv2]
  Line: [cv]
  LinkFileLock: [lockfile]
  Load: [cv]
  LoadImage: [cv]
  LoadImageM: [cv]
  Log: [cv]
  LogPolar: [cv]
  Lop: [theano]
  Mahalanobis: [cv2]
  Mahalonobis: [cv]
  MatMul: [cv]
  MatMulAdd: [cv]
  MatchShapes: [cv]
  MatchTemplate: [cv]
  Max: [cv]
  MaxRect: [cv]
  MaxS: [cv]
  MeanShift: [cv]
  Merge: [cv]
  Min: [cv]
  MinAreaRect2: [cv]
  MinEnclosingCircle: [cv]
  MinMaxLoc: [cv]
  MinS: [cv]
  MixChannels: [cv]
  MkdirFileLock: [lockfile]
  Moments: [cv]
  MorphologyEx: [cv]
  MoveWindow: [cv]
  Mul: [cv]
  MulSpectrums: [cv]
  MulTransposed: [cv]
  MultiplyAcc: [cv]
  NaN: [numpy]
  NaT: [pandas]
  Name: [tokenize]
  NamedWindow: [cv]
  Norm: [cv]
  NormalBayesClassifier: [cv2]
  Normalize: [cv]
  NormalizeHist: [cv]
  Not: [cv]
  Number: [tokenize]
  ORClosureReason: [stem]
  ORStatus: [stem]
  Octnumber: [tokenize]
  Operator: [tokenize]
  Or: [cv]
  OrS: [cv]
  PCABackProject: [cv2]
  PCACompute: [cv2]
  PCAComputeVar: [cv2]
  PCAProject: [cv2]
  PerspectiveTransform: [cv]
  PlainToken: [tokenize]
  PointPolygonTest: [cv]
  Pointfloat: [tokenize]
  PolarToCart: [cv]
  PolyLine: [cv]
  PopenGateway: [execnet]
  Pow: [cv]
  PreCornerDetect: [cv]
  ProjectPCA: [cv]
  ProjectPoints2: [cv]
  PseudoExtras: [tokenize]
  PseudoToken: [tokenize]
  PutText: [cv]
  PyCF_ONLY_AST: [ast]
  Py_UCS4: [Cython]
  Py_UNICODE: [Cython]
  Py_ssize_t: [Cython]
  PyrDown: [cv]
  PyrMeanShiftFiltering: [cv]
  PyrSegmentation: [cv]
  PyrUp: [cv]
  PyramidAdaptedFeatureDetector: [cv2]
  QueryFrame: [cv]
  QueryHistValue_1D: [cv]
  QueryHistValue_2D: [cv]
  QueryHistValue_3D: [cv]
  QueryHistValue_nD: [cv]
  RQDecomp3x3: [cv, cv2]
  RTrees: [cv2]
  Radix: [pyasn]
  RandArr: [cv]
  RandInt: [cv]
  RandReal: [cv]
  RandShuffle: [cv]
  Range: [cv]
  RealScalar: [cv]
  Rectangle: [cv]
  Reduce: [cv]
  RelayEndReason: [stem]
  Remap: [cv]
  RepairDB: [leveldb]
  Repeat: [cv]
  ReprojectImageTo3D: [cv]
  ResetImageROI: [cv]
  Reshape: [cv]
  ReshapeMatND: [cv]
  Resize: [cv]
  ResizeWindow: [cv]
  RetrieveFrame: [cv]
  Rodrigues: [cv2]
  Rodrigues2: [cv]
  Rop: [theano]
  Round: [cv]
  Runlevel: [stem]
  RunningAvg: [cv]
  SQLiteFileLock: [lockfile]
  SVBackSubst: [cv2]
  SVBkSb: [cv]
  SVDecomp: [cv2]
  Save: [cv]
  SaveImage: [cv]
  Scalar: [cv]
  ScalarAll: [cv]
  ScalarType: [numpy]
  ScalarTypes: [botocore]
  Scale: [cv]
  ScaleAdd: [cv]
  Scharr: [cv2]
  SegmentMotion: [cv]
  SeqInvert: [cv]
  SeqRemove: [cv]
  SeqRemoveSlice: [cv]
  Set: [cv]
  Set1D: [cv]
  Set2D: [cv]
  Set3D: [cv]
  SetCaptureProperty: [cv]
  SetData: [cv]
  SetIdentity: [cv]
  SetImageCOI: [cv]
  SetImageROI: [cv]
  SetMouseCallback: [cv]
  SetND: [cv]
  SetReal1D: [cv]
  SetReal2D: [cv]
  SetReal3D: [cv]
  SetRealND: [cv]
  SetTrackbarPos: [cv]
  SetWindowProperty: [cv]
  SetZero: [cv]
  Shadow: [Cython]
  ShowImage: [cv]
  Signal: [stem]
  SimpleBlobDetector: [cv2]
  SimpleBlobDetector_Params: [cv2]
  Single: [tokenize]
  Single3: [tokenize]
  Smooth: [cv]
  SnakeImage: [cv]
  Sobel: [cv, cv2]
  SocketGateway: [execnet]
  Solve: [cv]
  SolveCubic: [cv]
  SolvePoly: [cv]
  Sort: [cv]
  Special: [tokenize]
  Split: [cv]
  Sqrt: [cv]
  SquareAcc: [cv]
  SshGateway: [execnet]
  StarDetector: [cv2]
  StartWindowThread: [cv]
  StatusType: [stem]
  StereoBM: [cv2]
  StereoCalibrate: [cv]
  StereoRectify: [cv]
  StereoRectifyUncalibrated: [cv]
  StereoSGBM: [cv2]
  StereoVar: [cv2]
  StreamClosureReason: [stem]
  StreamPurpose: [stem]
  StreamSource: [stem]
  StreamStatus: [stem]
  String: [tokenize]
  StringIO: [rosdistro]
  StringTypes: [types]
  Style: [colorama]
  Sub: [cv]
  SubRS: [cv]
  SubS: [cv]
  Subdiv2D: [cv2]
  Subdiv2DEdgeDst: [cv]
  Subdiv2DEdgeOrg: [cv]
  Subdiv2DGetEdge: [cv]
  Subdiv2DLocate: [cv]
  Subdiv2DNextEdge: [cv]
  Subdiv2DRotateEdge: [cv]
  SubdivDelaunay2DInsert: [cv]
  Sum: [cv]
  TIOCM_DTR_str: [serial]
  TIOCM_RTS_str: [serial]
  TIOCM_zero_str: [serial]
  ThreshHist: [cv]
  Threshold: [cv]
  TimeoutSetType: [stem]
  Token: [tokenize]
  Trace: [cv]
  Transform: [cv]
  Transpose: [cv]
  Triple: [tokenize]
  True_: [numpy]
  Undistort2: [cv]
  UndistortPoints: [cv]
  UpdateMotionHistory: [cv]
  Updates: [theano]
  UserDict: [os]
  VideoCapture: [cv2]
  VideoWriter: [cv2]
  WaitKey: [cv]
  WarpAffine: [cv]
  WarpPerspective: [cv]
  Watershed: [cv]
  Whitespace: [tokenize]
  WriteFrame: [cv]
  Xor: [cv]
  XorS: [cv]
  Zero: [cv]
  a_star: [pytools]
  abiflags: [virtualenv]
  abort: [os]
  abs: [operator, numpy]
  abs__file__: [site]
  absdiff: [cv2]
  absolute: [numpy]
  absolute_import: [six, numpy, funcsigs, gevent, lockfile, matplotlib, networkx,
    numpydoc, pip, pytools, tornado, vcstools]
  abspath: [os.path]
  abstractmethod: [abc]
  access: [os]
  accessor: [objc]
  accumulate: [cv2]
  accumulateProduct: [cv2]
  accumulateSquare: [cv2]
  accumulateWeighted: [cv2]
  acquire_lock: [imp]
  activations: [theanets]
  adamic_adar_index: [networkx]
  adapters: [requests]
  adaptive: [downhill]
  adaptiveBilateralFilter: [cv2]
  adaptiveThreshold: [cv2]
  add: [operator, numpy, cv2]
  addConvenienceForBasicMapping: [objc]
  addConvenienceForBasicSequence: [objc]
  addConvenienceForClass: [objc]
  addWeighted: [cv2]
  add_arg: [climate]
  add_command: [climate]
  add_constructor: [yaml]
  add_docstring: [numpy]
  add_extension: [copy_reg]
  add_group: [climate]
  add_implicit_resolver: [yaml]
  add_metaclass: [six]
  add_move: [six]
  add_multi_constructor: [yaml]
  add_multi_representer: [yaml]
  add_mutex: [climate]
  add_newdoc: [numpy]
  add_newdoc_ufunc: [numpy]
  add_newdocs: [numpy]
  add_path_resolver: [yaml]
  add_python_path_relative_to_script: [pytools]
  add_representer: [yaml]
  add_tuples: [pytools]
  addnodes: [sphinx]
  addpackage: [site]
  address: [Cython]
  addsitedir: [site]
  addsitepackages: [site]
  addusersitepackages: [site]
  adj_matrix: [networkx]
  adjacency_matrix: [networkx]
  adjacency_spectrum: [networkx]
  adjlist: [networkx]
  advance_iterator: [six]
  after_this_request: [flask]
  agent: [paramiko]
  aiffread: [scikits.audiolab]
  aiffwrite: [scikits.audiolab]
  alarm: [signal]
  alen: [numpy]
  algebraic_connectivity: [networkx]
  algebraicconnectivity: [networkx]
  algorithms: [networkx]
  algos: [pandas]
  aliases: [encodings]
  aliasmbcs: [site]
  all: [numpy, networkx, pytools]
  all_equal: [pytools]
  all_neighbors: [networkx]
  all_pairs_dijkstra_path: [networkx]
  all_pairs_dijkstra_path_length: [networkx]
  all_pairs_node_connectivity: [networkx]
  all_pairs_shortest_path: [networkx]
  all_pairs_shortest_path_length: [networkx]
  all_roughly_equal: [pytools]
  all_shortest_paths: [networkx]
  all_simple_paths: [networkx]
  all_symbols: [astor]
  all_timezones: [pytz]
  all_timezones_set: [pytz]
  allclose: [numpy]
  allocate: [thread]
  allocateBuffer: [objc]
  allocate_lock: [thread]
  alltrue: [numpy]
  alphanums: [pyparsing]
  alphas: [pyparsing]
  alphas8bit: [pyparsing]
  alterdot: [numpy]
  altsep: [os]
  amax: [numpy]
  amin: [numpy]
  analyze: [shedskin]
  ancestors: [networkx]
  and_: [operator]
  angle: [numpy]
  annotate: [climate, shedskin]
  annotations: [plac]
  ansi: [colorama]
  ansi_color_codes: [coloredlogs]
  ansi_text: [coloredlogs]
  ansitowin32: [colorama]
  any: [tokenize, numpy, pytools]
  anyCloseTag: [pyparsing]
  anyOpenTag: [pyparsing]
  api: [requests, jedi, sleekxmpp]
  api_version: [sys]
  apipkg: [py]
  app: [flask]
  appcontext_popped: [flask]
  appcontext_pushed: [flask]
  appcontext_tearing_down: [flask]
  append: [numpy]
  append_slash_redirect: [werkzeug]
  applyColorMap: [cv2]
  apply_along_axis: [numpy]
  apply_over_axes: [numpy]
  approxPolyDP: [cv2]
  approximate_current_flow_betweenness_centrality: [networkx]
  aptdistro: [rosdistro]
  arange: [numpy]
  arcLength: [cv2]
  arccos: [numpy]
  arccosh: [numpy]
  arcsin: [numpy]
  arcsinh: [numpy]
  arctan: [numpy]
  arctan2: [numpy]
  arctanh: [numpy]
  argmax: [numpy, pytools]
  argmax2: [pytools]
  argmin: [numpy, pytools]
  argmin2: [pytools]
  argparse: [plac]
  argpartition: [numpy]
  argsort: [numpy]
  argv: [sys]
  argwhere: [numpy]
  around: [numpy]
  array: [numpy]
  array2string: [numpy]
  array_equal: [numpy]
  array_equiv: [numpy]
  array_repr: [numpy]
  array_split: [numpy]
  array_str: [numpy]
  arrowedLine: [cv2]
  articulation_points: [networkx]
  asanyarray: [numpy]
  asarray: [numpy]
  asarray_chkfinite: [numpy]
  ascii: [encodings, pytz]
  ascii_decode: [codecs]
  ascii_encode: [codecs]
  ascii_letters: [string]
  ascii_lowercase: [string]
  ascii_uppercase: [string]
  ascontiguousarray: [numpy]
  asfarray: [numpy]
  asfortranarray: [numpy]
  asmatrix: [numpy]
  asscalar: [numpy]
  assertCountEqual: [six]
  assertRaisesRegex: [six]
  assertRegex: [six]
  assert_not_a_file: [pytools]
  assortativity: [networkx]
  ast: [jmespath, mako]
  ast2json: [ast2json]
  astar: [networkx]
  astar_path: [networkx]
  astar_path_length: [networkx]
  asteval: [asteval]
  astutils: [asteval]
  atleast_1d: [numpy]
  atleast_2d: [numpy]
  atleast_3d: [numpy]
  atof: [string]
  atoi: [string]
  atol: [string]
  attr_matrix: [networkx]
  attr_sparse_matrix: [networkx]
  attracting: [networkx]
  attracting_component_subgraphs: [networkx]
  attracting_components: [networkx]
  attribute_assortativity_coefficient: [networkx]
  attribute_mixing_dict: [networkx]
  attribute_mixing_matrix: [networkx]
  attrmatrix: [networkx]
  auread: [scikits.audiolab]
  auth: [requests]
  auth_handler: [paramiko]
  author: [grizzled]
  authority_matrix: [networkx]
  autocomplete: [pip]
  auwrite: [scikits.audiolab]
  avail_phymem: [psutil]
  avail_virtmem: [psutil]
  available_encodings: [scikits.audiolab]
  available_file_formats: [scikits.audiolab]
  average: [numpy, pytools]
  average_clustering: [networkx]
  average_degree_connectivity: [networkx]
  average_neighbor_degree: [networkx]
  average_node_connectivity: [networkx]
  average_shortest_path_length: [networkx]
  b: [six]
  backend: [zmq]
  backslashreplace_errors: [codecs]
  bad_pyparsing: [matplotlib]
  balanced_tree: [networkx]
  barabasi_albert_graph: [networkx]
  barbell_graph: [networkx]
  bartlett: [numpy]
  base: [downhill, sklearn]
  base64: [itsdangerous, panda, virtualenv, unirest]
  base64_decode: [itsdangerous]
  base64_encode: [itsdangerous]
  base_repr: [numpy]
  basecommand: [pip]
  basename: [os.path]
  baseparser: [pip]
  basexmpp: [sleekxmpp]
  batchDistance: [cv2]
  baudrate_constants: [serial]
  bazaar: [pip]
  bb: [mftracker]
  bccache: [jinja2]
  bdate_range: [pandas]
  bellman_ford: [networkx]
  bench: [numpy, scikits.audiolab]
  ber: [paramiko]
  betweenness: [networkx]
  betweenness_centrality: [networkx]
  betweenness_centrality_source: [networkx]
  betweenness_centrality_subset: [networkx]
  betweenness_subset: [networkx]
  bfs_edges: [networkx]
  bfs_predecessors: [networkx]
  bfs_successors: [networkx]
  bfs_tree: [networkx]
  biconnected: [networkx]
  biconnected_component_edges: [networkx]
  biconnected_component_subgraphs: [networkx]
  biconnected_components: [networkx]
  bidirectional_dijkstra: [networkx]
  bidirectional_shortest_path: [networkx]
  bilateralFilter: [cv2]
  binary: [networkx]
  binary_repr: [numpy]
  bincount: [numpy]
  bind_arguments: [werkzeug]
  binomial_graph: [networkx]
  bint: [Cython]
  bipartite: [networkx]
  bipartite_alternating_havel_hakimi_graph: [networkx]
  bipartite_configuration_model: [networkx]
  bipartite_gnmk_random_graph: [networkx]
  bipartite_havel_hakimi_graph: [networkx]
  bipartite_preferential_attachment_graph: [networkx]
  bipartite_random_graph: [networkx]
  bipartite_reverse_havel_hakimi_graph: [networkx]
  bitlog2: [pyopencl]
  bitwise_and: [numpy, cv2]
  bitwise_not: [numpy, cv2]
  bitwise_or: [numpy, cv2]
  bitwise_xor: [numpy, cv2]
  blackman: [numpy]
  block: [networkx]
  blockmodel: [networkx]
  blueprints: [flask]
  blur: [cv2]
  bmat: [numpy]
  boot_time: [psutil]
  bootstrap_install_from: [setuptools]
  borderInterpolate: [cv2]
  boundary: [networkx]
  boundingRect: [cv2]
  boxFilter: [cv2]
  breadth_first_search: [networkx]
  broadcast: [opencl]
  broadcast_arrays: [numpy]
  buffered_pipe: [paramiko]
  build: [downhill]
  buildOpticalFlowPyramid: [cv2]
  buildTagMap: [BeautifulSoup]
  build_main: [sphinx]
  build_time_vars: [sitecustomize]
  build_tzinfo: [pytz]
  builtin: [mock, py]
  builtin_module_names: [sys]
  bull_graph: [networkx]
  busday_count: [numpy]
  busday_offset: [numpy]
  byte2int: [six]
  byte_bounds: [numpy]
  byteorder: [sys]
  bytes_sockopts: [zmq]
  bytes_to_int: [itsdangerous]
  bzr: [vcstools]
  cStyleComment: [pyparsing]
  c_: [numpy]
  cache: [linecache, jedi, mako]
  calcBackProject: [cv2]
  calcCovarMatrix: [cv2]
  calcGlobalOrientation: [cv2]
  calcHist: [cv2]
  calcMotionGradient: [cv2]
  calcOpticalFlowFarneback: [cv2]
  calcOpticalFlowPyrLK: [cv2]
  calcOpticalFlowSF: [cv2]
  calculateBBCenter: [mftracker]
  calibrateCamera: [cv2]
  calibrationMatrixValues: [cv2]
  call_subprocess: [virtualenv]
  call_tracing: [sys]
  callable: [six, psutil]
  callbackFor: [objc]
  callstats: [sys]
  can_cast: [numpy]
  canonical_path: [panda]
  canonical_querystring: [panda]
  capacity_scaling: [networkx]
  capitalize: [string]
  capwords: [string]
  cartToPolar: [cv2]
  cartesian_product: [networkx, pytools]
  cartesian_product_sum: [pytools]
  case: [nose, unittest]
  cast: [numpy]
  caveman_graph: [networkx]
  cbook: [matplotlib]
  ccall: [Cython]
  cclass: [Cython]
  cdiv: [Cython]
  ceil: [numpy]
  center: [string, networkx]
  centrality: [networkx]
  certs: [requests]
  cfunc: [Cython]
  chamerMatching: [cv2]
  change_prefix: [virtualenv]
  channel: [paramiko]
  char: [numpy]
  charbuffer_encode: [codecs]
  chardet: [BeautifulSoup]
  charmap_build: [codecs]
  charmap_decode: [codecs]
  charmap_encode: [codecs]
  chdir: [os]
  checkHardwareSupport: [cv2]
  checkRange: [cv2]
  check_enableusersite: [site]
  check_isolated: [pip]
  check_password_hash: [werkzeug]
  checkcache: [linecache]
  checkdep_dvipng: [matplotlib]
  checkdep_ghostscript: [matplotlib]
  checkdep_inkscape: [matplotlib]
  checkdep_pdftops: [matplotlib]
  checkdep_ps_distiller: [matplotlib]
  checkdep_tex: [matplotlib]
  checkdep_usetex: [matplotlib]
  checkdep_xmllint: [matplotlib]
  chflags: [os]
  chmod: [os]
  choose: [numpy]
  chordal: [networkx]
  chordal_alg: [networkx]
  chordal_graph_cliques: [networkx]
  chordal_graph_treewidth: [networkx]
  chown: [os]
  chroot: [os]
  chvatal_graph: [networkx]
  circle: [cv2]
  circular_ladder_graph: [networkx]
  circular_layout: [networkx]
  cl_mem: [opencl]
  cl_types: [opencl]
  classAddMethod: [objc]
  classAddMethods: [objc]
  class_types: [six]
  classes: [networkx]
  classic: [networkx]
  classify_class_attrs: [inspect]
  cleandoc: [inspect]
  clear_caches: [jinja2]
  clear_default_headers: [unirest]
  clear_extension_cache: [copy_reg]
  clearcache: [linecache]
  clgl: [opencl]
  client: [paramiko]
  clientxmpp: [sleekxmpp]
  clip: [numpy]
  clipLine: [cv2]
  clique: [networkx]
  cliques_containing_node: [networkx]
  clone: [theano, sklearn]
  close: [os]
  closeness: [networkx]
  closeness_centrality: [networkx]
  closeness_vitality: [networkx]
  closerange: [os]
  cluster: [networkx]
  clustering: [networkx]
  cmdline: [grizzled, tox]
  cmdoptions: [pip]
  cmod: [Cython]
  cmp_lt: [heapq]
  cmp_op: [opcode]
  cmp_to_key: [functools, functools32]
  cn_soundarajan_hopcroft: [networkx]
  code: [py]
  codec: [interpy, pyasn1]
  codecs: [encodings, BeautifulSoup, virtualenv]
  codegen: [astor, mako]
  codes: [requests]
  codetoast: [astor]
  col: [pyparsing]
  collapse_addresses: [pyasn]
  collections: [psutil]
  collector: [nose]
  color: [glumpy]
  colormap: [glumpy]
  colors: [matplotlib]
  column_stack: [numpy]
  comb: [pytools]
  commaSeparatedList: [pyparsing]
  commands: [pip]
  commands_dict: [pip]
  common: [jedi, paramiko, rosdistro, rospkg, rsa, vcstools, wstool]
  commonHTMLEntity: [pyparsing]
  common_dtype: [pytools]
  common_neighbors: [networkx]
  common_prefix: [pytools]
  common_timezones: [pytz]
  common_timezones_set: [pytz]
  common_type: [numpy]
  commonprefix: [os.path]
  communicability: [networkx]
  communicability_alg: [networkx]
  communicability_betweenness_centrality: [networkx]
  communicability_centrality: [networkx]
  communicability_centrality_exp: [networkx]
  communicability_exp: [networkx]
  community: [networkx]
  compact_json: [itsdangerous]
  compare: [cv2]
  compareHist: [cv2]
  compare_chararrays: [numpy]
  compare_versions: [matplotlib]
  compat: [requests, theano, numpy, jmespath, jsonschema, matplotlib, pandas, pip,
    pyasn1, setuptools, mako]
  compatibility: [unittest2]
  compile: [re, theano, jmespath]
  compiled: [Cython]
  compiler: [configobj, jinja2]
  compiler_output: [pyopencl]
  complement: [networkx]
  completeSymm: [cv2]
  complete_bipartite_graph: [networkx]
  complete_graph: [networkx]
  complex: [Cython]
  complex_types: [Cython]
  components: [networkx]
  componentxmpp: [sleekxmpp]
  compose: [yaml, networkx]
  composeRT: [cv2]
  compose_all: [yaml, networkx]
  composer: [yaml]
  compress: [numpy, paramiko]
  computation: [pandas]
  computeCorrespondEpilines: [cv2]
  concat: [operator, pandas]
  concatenate: [numpy, humanfriendly]
  condensation: [networkx]
  config: [theano, nose, paramiko, shedskin, tox, flask]
  config_elements: [wstool]
  config_yaml: [wstool]
  configdefaults: [theano]
  configparser: [theano]
  configuration_model: [networkx]
  confstr: [os]
  confstr_names: [os]
  conj: [numpy]
  conjugate: [numpy]
  connected: [networkx]
  connected_caveman_graph: [networkx]
  connected_component_subgraphs: [networkx]
  connected_components: [networkx]
  connected_double_edge_swap: [networkx]
  connected_watts_strogatz_graph: [networkx]
  connectivity: [networkx]
  constant_time_compare: [itsdangerous]
  constants: [zmq]
  constructor: [copy_reg, yaml]
  contains: [operator]
  context: [opencl, objc]
  contextfilter: [jinja2]
  contextfunction: [jinja2]
  contextlib: [matplotlib]
  contextmanager: [decorator, pathlib]
  contourArea: [cv2]
  convert: [networkx, virtualenv]
  convertMaps: [cv2]
  convertPointsFromHomogeneous: [cv2]
  convertPointsToHomogeneous: [cv2]
  convertScaleAbs: [cv2]
  convert_matrix: [networkx]
  convert_node_labels_to_integers: [networkx]
  convert_path: [setuptools]
  converter: [matplotlib]
  convexHull: [cv2]
  convexityDefects: [cv2]
  convolve: [numpy]
  cookie_date: [werkzeug]
  cookies: [requests]
  copencl: [opencl]
  copy: [numpy, coloredlogs, mftracker, networkx]
  copyMakeBorder: [cv2]
  copy_current_request_context: [flask]
  copy_location: [ast]
  copy_reg: [re]
  copy_required_modules: [virtualenv]
  copyfile: [virtualenv]
  copyfileordir: [virtualenv]
  copyreg: [opencl]
  copyright: [sys]
  copysign: [numpy]
  copyto: [numpy]
  core: [numpy, certifi, networkx, nose, pandas, rsa]
  core_number: [networkx]
  cornerEigenValsAndVecs: [cv2]
  cornerHarris: [cv2]
  cornerMinEigenVal: [cv2]
  cornerSubPix: [cv2]
  corpora: [gensim]
  corrcoef: [numpy]
  correctMatches: [cv2]
  correlate: [numpy]
  correlation: [networkx]
  cos: [numpy]
  cosh: [numpy]
  cost_of_flow: [networkx]
  could_be_isomorphic: [networkx]
  count: [string]
  countNonZero: [cv2]
  countOf: [operator]
  count_nonzero: [numpy]
  countedArray: [pyparsing]
  country_names: [pytz]
  country_timezones: [pytz]
  cov: [numpy]
  cpp: [shedskin]
  cppStyleComment: [pyparsing]
  cpu_count: [joblib, psutil]
  cpu_percent: [psutil]
  cpu_times: [psutil]
  cpu_times_percent: [psutil]
  createCLAHE: [cv2]
  createEigenFaceRecognizer: [cv2]
  createFisherFaceRecognizer: [cv2]
  createHanningWindow: [cv2]
  createLBPHFaceRecognizer: [cv2]
  createOpaquePointerType: [objc]
  createStructAlias: [objc]
  createStructType: [objc]
  createTrackbar: [cv2]
  create_autospec: [mock]
  create_bootstrap_script: [virtualenv]
  create_bound_method: [six]
  create_empty_copy: [networkx]
  create_environ: [werkzeug]
  create_environment: [virtualenv]
  create_main_parser: [pip]
  create_program_with_built_in_kernels: [pyopencl]
  create_some_context: [pyopencl]
  cross: [numpy]
  crosstab: [pandas]
  cssselectpatch: [pyquery]
  ctermid: [os]
  ctx: [flask]
  ctx_opt_names: [zmq]
  ctx_opts: [zmq]
  ctypes: [forbiddenfruit, opencl]
  ctypeslib: [numpy]
  cubeRoot: [cv2]
  cubical_graph: [networkx]
  cumprod: [numpy]
  cumproduct: [numpy]
  cumsum: [numpy]
  curdir: [os]
  currentBundle: [objc]
  current_app: [flask]
  current_flow_betweenness: [networkx]
  current_flow_betweenness_centrality: [networkx]
  current_flow_betweenness_centrality_subset: [networkx]
  current_flow_betweenness_subset: [networkx]
  current_flow_closeness: [networkx]
  current_flow_closeness_centrality: [networkx]
  currentframe: [inspect]
  curse: [forbiddenfruit]
  curses: [forbiddenfruit]
  curve_keypair: [zmq]
  cut: [pandas]
  cv: [cv2, mftracker]
  cv2: [mftracker]
  cvtColor: [cv2]
  cyaml: [yaml]
  cycle_basis: [networkx]
  cycle_graph: [networkx]
  cycles: [networkx]
  dag: [networkx]
  dataset: [downhill]
  date_range: [pandas]
  datetime: [pytz]
  datetime_as_string: [numpy]
  datetime_data: [numpy]
  datetools: [pandas]
  dateutil: [matplotlib]
  davis_southern_women_graph: [networkx]
  dblQuotedString: [pyparsing]
  dblSlashComment: [pyparsing]
  dct: [cv2]
  debug: [jedi, pyasn1]
  debughelpers: [flask]
  declare: [Cython]
  decode: [codecs]
  decomposeProjectionMatrix: [cv2]
  decorate: [pytools]
  decorator: [decorator, pytools]
  decorator_module: [pytools]
  decrease_verbosity: [coloredlogs]
  decrypt: [rsa]
  default: [matplotlib]
  defaultParams: [matplotlib]
  defaultTestLoader: [unittest]
  default_action: [warnings]
  default_config_file: [virtualenv]
  default_group: [execnet]
  default_header: [unirest]
  default_help: [plac]
  default_int_handler: [signal]
  default_storage_dir: [virtualenv]
  default_test_modules: [matplotlib]
  defaultaction: [warnings]
  defaults: [jinja2]
  defined_names: [jedi]
  defpath: [os]
  deg2rad: [numpy]
  degree: [networkx]
  degree_alg: [networkx]
  degree_assortativity_coefficient: [networkx]
  degree_centrality: [networkx]
  degree_histogram: [networkx]
  degree_mixing_dict: [networkx]
  degree_mixing_matrix: [networkx]
  degree_pearson_correlation_coefficient: [networkx]
  degree_seq: [networkx]
  degree_sequence_tree: [networkx]
  degrees: [numpy]
  deinit: [colorama]
  delayed: [joblib]
  delete: [requests, numpy, unirest]
  delimitedList: [pyparsing]
  delitem: [operator]
  delslice: [operator]
  delta: [pytools]
  dense: [networkx]
  dense_gnm_random_graph: [networkx]
  density: [networkx]
  depends: [setuptools]
  deprecate: [numpy]
  deprecate_with_doc: [numpy]
  deprecated: [execnet]
  deprecation: [pip]
  depth_first_search: [networkx]
  desargues_graph: [networkx]
  descendants: [networkx]
  describe_option: [pandas]
  destroyAllWindows: [cv2]
  destroyWindow: [cv2]
  determinant: [cv2]
  develdistro: [rosdistro]
  device: [serial, zmq]
  devices: [zmq]
  devnull: [os]
  dfs_edges: [networkx]
  dfs_labeled_edges: [networkx]
  dfs_postorder_nodes: [networkx]
  dfs_predecessors: [networkx]
  dfs_preorder_nodes: [networkx]
  dfs_successors: [networkx]
  dfs_tree: [networkx]
  dft: [cv2]
  diag: [numpy]
  diag_indices: [numpy]
  diag_indices_from: [numpy]
  diagflat: [numpy]
  diagonal: [numpy]
  diameter: [networkx]
  diamond_graph: [networkx]
  dictOf: [pyparsing]
  dict_exists: [enchant]
  diff: [numpy]
  difference: [networkx]
  digitize: [numpy]
  digits: [string]
  digraph: [networkx]
  dijkstra_path: [networkx]
  dijkstra_path_length: [networkx]
  dijkstra_predecessor_and_distance: [networkx]
  dilate: [cv2]
  directed: [networkx]
  directed_configuration_model: [networkx]
  directed_havel_hakimi_graph: [networkx]
  directed_laplacian_matrix: [networkx]
  directives: [sphinx]
  dirname: [os.path]
  dis: [inspect]
  disassemble: [dis]
  disassemble_string: [dis]
  disco: [dis]
  disconnect_contextmanager: [qtutils]
  disjoint_union: [networkx]
  disjoint_union_all: [networkx]
  disk: [joblib]
  disk_io_counters: [psutil]
  disk_partitions: [psutil]
  disk_size_units: [humanfriendly]
  disk_usage: [psutil]
  disp: [numpy]
  dispatch_table: [copy_reg]
  dispersion: [networkx]
  displayhook: [sys]
  dist: [setuptools]
  distanceTransform: [cv2]
  distanceTransformWithLabels: [cv2]
  distance_measures: [networkx]
  distance_regular: [networkx]
  distb: [dis]
  distinct_pairs: [pytools]
  distribution: [rosdistro]
  distribution_cache: [rosdistro]
  distribution_file: [rosdistro]
  distutils: [numpy, matplotlib, setuptools, virtualenv]
  div: [operator]
  div_ceil: [pytools]
  divide: [numpy, cv2]
  division: [numpy, funcsigs, matplotlib, numpydoc, pytools, tornado]
  doc_build_file: [rosdistro]
  doc_file: [rosdistro]
  doc_repository_specification: [rosdistro]
  docopt: [docopt]
  docscrape: [numpydoc]
  docscrape_sphinx: [numpydoc]
  dodecahedral_graph: [networkx]
  domains: [sphinx]
  dominating: [networkx]
  dominating_set: [networkx]
  dont_write_bytecode: [sys]
  dorogovtsev_goltsev_mendes_graph: [networkx]
  dot: [theano, numpy]
  double: [Cython]
  double3prog: [tokenize]
  double_edge_swap: [networkx]
  doublecomplex: [Cython]
  downcaseTokens: [pyparsing]
  download: [pip]
  dquot: [configobj]
  draft3_format_checker: [jsonschema]
  draft4_format_checker: [jsonschema]
  draw: [networkx]
  drawChessboardCorners: [cv2]
  drawContours: [cv2]
  drawDataMatrixCodes: [cv2]
  drawKeypoints: [cv2]
  draw_circular: [networkx]
  draw_graphviz: [networkx]
  draw_networkx: [networkx]
  draw_networkx_edge_labels: [networkx]
  draw_networkx_edges: [networkx]
  draw_networkx_labels: [networkx]
  draw_networkx_nodes: [networkx]
  draw_random: [networkx]
  draw_shell: [networkx]
  draw_spectral: [networkx]
  draw_spring: [networkx]
  drawing: [networkx]
  dsplit: [numpy]
  dsskey: [paramiko]
  dstack: [numpy]
  dtypes: [pygpu]
  dual: [numpy]
  dump: [yaml, ast, astor, joblib]
  dump_all: [yaml]
  dump_cookie: [werkzeug]
  dump_header: [werkzeug]
  dump_options_header: [werkzeug]
  dumper: [yaml]
  dumps: [execnet]
  dup: [os]
  dup2: [os]
  dyld_find: [objc]
  dyld_framework: [objc]
  dyld_library: [objc]
  e: [sitecustomize, numpy]
  eccentricity: [networkx]
  ecdsakey: [paramiko]
  edge_betweenness: [networkx]
  edge_betweenness_centrality: [networkx]
  edge_betweenness_centrality_subset: [networkx]
  edge_boundary: [networkx]
  edge_connectivity: [networkx]
  edge_current_flow_betweenness_centrality: [networkx]
  edge_current_flow_betweenness_centrality_subset: [networkx]
  edge_load: [networkx]
  edgelist: [networkx]
  edges: [networkx]
  edges_iter: [networkx]
  ediff1d: [numpy]
  ego: [networkx]
  ego_graph: [networkx]
  eigen: [cv2]
  eigenvector: [networkx]
  eigenvector_centrality: [networkx]
  eigenvector_centrality_numpy: [networkx]
  einsum: [numpy]
  elemwise: [pygpu]
  ellipse: [cv2]
  ellipse2Poly: [cv2]
  email: [grizzled]
  emath: [numpy]
  emit: [yaml]
  emitter: [yaml]
  empty: [numpy, opencl]
  empty_graph: [networkx]
  empty_image: [opencl]
  empty_like: [numpy]
  enable_debugging: [pyopencl]
  enable_default_logging: [climate]
  encode: [codecs, poster]
  encodings: [interpy.codec.register]
  encrypt: [rsa]
  endprogs: [tokenize]
  enqueue_barrier: [pyopencl]
  enqueue_copy: [pyopencl]
  enqueue_copy_buffer: [pyopencl]
  enqueue_copy_buffer_rect: [pyopencl]
  enqueue_copy_buffer_to_image: [pyopencl]
  enqueue_copy_image: [pyopencl]
  enqueue_copy_image_to_buffer: [pyopencl]
  enqueue_fill_buffer: [pyopencl]
  enqueue_fill_image: [pyopencl]
  enqueue_map_buffer: [pyopencl]
  enqueue_map_image: [pyopencl]
  enqueue_marker: [pyopencl]
  enqueue_migrate_mem_objects: [pyopencl]
  enqueue_nd_range_kernel: [pyopencl]
  enqueue_read_buffer: [pyopencl]
  enqueue_read_buffer_rect: [pyopencl]
  enqueue_read_image: [pyopencl]
  enqueue_task: [pyopencl]
  enqueue_write_buffer: [pyopencl]
  enqueue_write_buffer_rect: [pyopencl]
  enqueue_write_image: [pyopencl]
  enumerate_basic_directions: [pytools]
  environ: [os]
  environment: [rospkg, jinja2]
  environmentfilter: [jinja2]
  environmentfunction: [jinja2]
  eq: [operator]
  equal: [numpy]
  equalizeHist: [cv2]
  erdos_renyi_graph: [networkx]
  erode: [cv2]
  errno: [os]
  errorcode: [errno]
  errors: [opencl, enchant, sphinx]
  escape: [re, flask, jinja2, markupsafe, werkzeug]
  escape_decode: [codecs]
  escape_encode: [codecs]
  escape_silent: [markupsafe]
  estimateAffine3D: [cv2]
  estimateRigidTransform: [cv2]
  estrada_index: [networkx]
  euclideanDistance: [mftracker]
  euler: [networkx]
  euler_gamma: [numpy]
  eulerian_circuit: [networkx]
  eval: [pandas]
  evalcontextfilter: [jinja2]
  evalcontextfunction: [jinja2]
  evaluate: [jedi]
  event: [opencl]
  events: [yaml]
  ewma: [pandas]
  ewmcorr: [pandas]
  ewmcov: [pandas]
  ewmstd: [pandas]
  ewmvar: [pandas]
  ewmvol: [pandas]
  exc: [nose]
  exc_clear: [sys]
  exc_info: [sys]
  exc_type: [sys]
  excepthook: [sys]
  exception: [networkx]
  exceptions: [requests, jmespath, jsonschema, pip, pytz, sleekxmpp, jinja2, mako,
    werkzeug]
  exec_: [six]
  exec_prefix: [sys]
  execl: [os]
  execle: [os]
  execlp: [os]
  execlpe: [os]
  execsitecustomize: [site]
  execusercustomize: [site]
  executable: [sys]
  execv: [os]
  execve: [os]
  execvp: [os]
  execvpe: [os]
  exists: [os.path]
  exit: [thread, sys]
  exit_thread: [thread]
  exp: [numpy, cv2]
  exp2: [numpy]
  expand_dims: [numpy]
  expand_to_packages: [rospkg]
  expanding_apply: [pandas]
  expanding_corr: [pandas]
  expanding_corr_pairwise: [pandas]
  expanding_count: [pandas]
  expanding_cov: [pandas]
  expanding_kurt: [pandas]
  expanding_max: [pandas]
  expanding_mean: [pandas]
  expanding_median: [pandas]
  expanding_min: [pandas]
  expanding_quantile: [pandas]
  expanding_skew: [pandas]
  expanding_std: [pandas]
  expanding_sum: [pandas]
  expanding_var: [pandas]
  expandtabs: [string]
  expanduser: [os.path]
  expandvars: [os.path]
  expectedFailure: [unittest]
  expected_degree_graph: [networkx]
  expected_exe: [virtualenv]
  expm1: [numpy]
  ext: [mako]
  extension: [setuptools]
  external: [networkx, rosdistro]
  externals: [sklearn]
  extmod: [shedskin]
  extra: [mock]
  extract: [numpy]
  extractChannel: [cv2]
  extract_path_info: [werkzeug]
  extract_stack: [traceback]
  extract_tb: [traceback]
  extras: [docopt]
  extsep: [os]
  eye: [numpy]
  f: [matplotlib]
  fabs: [numpy]
  factorial: [pytools]
  factorize: [pandas]
  failure: [nose]
  fama_macbeth: [pandas]
  fastAtan2: [cv2]
  fastCopyAndTranspose: [numpy]
  fastNlMeansDenoising: [cv2]
  fastNlMeansDenoisingColored: [cv2]
  fastNlMeansDenoisingColoredMulti: [cv2]
  fastNlMeansDenoisingMulti: [cv2]
  fast_could_be_isomorphic: [networkx]
  fast_gnp_random_graph: [networkx]
  faster_could_be_isomorphic: [networkx]
  fbtrack: [mftracker]
  fchdir: [os]
  fchmod: [os]
  fchown: [os]
  fcntl: [serial]
  fdopen: [os]
  feedforward: [theanets]
  fft: [numpy]
  fftpack: [scipy]
  fiedler_vector: [networkx]
  figure: [glumpy]
  file: [paramiko]
  file_search_dirs: [virtualenv]
  file_spec: [mock]
  fillConvexPoly: [cv2]
  fillPoly: [cv2]
  fill_diagonal: [numpy]
  filter: [pygments]
  filter2D: [cv2]
  filterSpeckles: [cv2]
  filter_install_output: [virtualenv]
  filters: [warnings, jinja2, mako, pygments]
  filterwarnings: [warnings]
  final: [Cython]
  find: [string]
  findChessboardCorners: [cv2]
  findCirclesGrid: [cv2]
  findCirclesGridDefault: [cv2]
  findContours: [cv2]
  findDataMatrix: [cv2]
  findFundamentalMat: [cv2]
  findHomography: [cv2]
  findNonZero: [cv2]
  findTestCases: [unittest]
  find_cliques: [networkx]
  find_cliques_recursive: [networkx]
  find_common_type: [numpy]
  find_cores: [networkx]
  find_defined_levels: [coloredlogs]
  find_induced_nodes: [networkx]
  find_max_where: [pytools]
  find_module: [imp]
  find_modules: [werkzeug]
  find_packages: [setuptools]
  find_wheels: [virtualenv]
  findall: [re, setuptools]
  finditer: [re]
  findlabels: [dis]
  findlinestarts: [dis]
  findsource: [inspect]
  first_order: [downhill]
  fitEllipse: [cv2]
  fitLine: [cv2]
  fix: [numpy]
  fix_lib64: [virtualenv]
  fix_local_scheme: [virtualenv]
  fix_missing_locations: [ast]
  fixup_egg_link: [virtualenv]
  fixup_pth_and_egg_link: [virtualenv]
  fixup_pth_file: [virtualenv]
  fixup_scripts: [virtualenv]
  flacread: [scikits.audiolab]
  flacwrite: [scikits.audiolab]
  flags: [sys, climate]
  flann_Index: [cv2]
  flash: [flask]
  flatnonzero: [numpy]
  flatten: [pytools]
  flatten_errors: [configobj]
  flip: [cv2]
  fliplr: [numpy]
  flipud: [numpy]
  float: [Cython]
  float_info: [sys]
  float_repr_style: [sys]
  float_types: [Cython]
  floatcomplex: [Cython]
  floating: [Cython]
  floodFill: [cv2]
  floor: [numpy]
  floor_divide: [numpy]
  floordiv: [operator]
  florentine_families_graph: [networkx]
  flow: [networkx]
  flow_hierarchy: [networkx]
  flow_matrix: [networkx]
  floyd_warshall: [networkx]
  floyd_warshall_numpy: [networkx]
  floyd_warshall_predecessor_and_distance: [networkx]
  fmax: [numpy]
  fmin: [numpy]
  fmod: [numpy]
  fname: [pyparsing]
  fnmatch: [pathlib]
  fnmatchcase: [setuptools]
  foldl: [theano]
  foldr: [theano]
  fontconfig_pattern: [matplotlib]
  fork: [os]
  forkpty: [os]
  formal_usage: [docopt]
  format: [pygments]
  format_exc: [traceback]
  format_exception: [traceback]
  format_exception_only: [traceback]
  format_list: [traceback]
  format_path: [humanfriendly]
  format_size: [humanfriendly]
  format_stack: [traceback, joblib]
  format_string: [werkzeug]
  format_tb: [traceback]
  format_timespan: [humanfriendly]
  formatannotation: [funcsigs]
  formatargspec: [inspect]
  formatargvalues: [inspect]
  formatter: [pygments]
  formatters: [pygments]
  formatwarning: [warnings]
  fpathconf: [os]
  freeze: [networkx]
  frexp: [numpy]
  from_agraph: [networkx]
  from_dict_of_dicts: [networkx]
  from_dict_of_lists: [networkx]
  from_edgelist: [networkx]
  from_host: [opencl]
  from_numpy_matrix: [networkx]
  from_scipy_sparse_matrix: [networkx]
  fromarray: [cv]
  frombuffer: [numpy]
  fromfile: [numpy]
  fromfunction: [numpy]
  fromiter: [numpy]
  frompyfunc: [numpy]
  fromregex: [numpy]
  fromstring: [numpy]
  frucht_graph: [networkx]
  fruchterman_reingold_layout: [networkx]
  fstat: [os]
  fstatvfs: [os]
  fsync: [os]
  ftruncate: [os]
  full: [numpy]
  full_like: [numpy]
  full_rary_tree: [networkx]
  func_inspect: [joblib]
  function: [theano, networkx]
  functools: [six, funcsigs, lockfile, pathlib, psutil]
  functools32: [functools32]
  fused_type: [Cython]
  fv: [numpy]
  g: [flask]
  gateway: [execnet]
  gateway_base: [execnet]
  gateway_bootstrap: [execnet]
  gateway_io: [execnet]
  gaussian_random_partition_graph: [networkx]
  ge: [operator]
  gemm: [cv2]
  general_random_intersection_graph: [networkx]
  general_sum: [pytools]
  generate_adjlist: [networkx]
  generate_all_integer_tuples: [pytools]
  generate_all_integer_tuples_below: [pytools]
  generate_all_nonnegative_integer_tuples: [pytools]
  generate_all_positive_integer_tuples: [pytools]
  generate_code: [shedskin]
  generate_decreasing_nonnegative_tuples_summing_to: [pytools]
  generate_edgelist: [networkx]
  generate_etag: [werkzeug]
  generate_gexf: [networkx]
  !!python/unicode 'generate_gml': [networkx]
  generate_graph6: [networkx]
  generate_graphml: [networkx]
  generate_multiline_adjlist: [networkx]
  generate_nonnegative_integer_tuples_below: [pytools]
  generate_nonnegative_integer_tuples_summing_to_at_most: [pytools]
  generate_pajek: [networkx]
  generate_password_hash: [werkzeug]
  generate_permutations: [pytools]
  generate_positive_integer_tuples_below: [pytools]
  generate_signature: [panda]
  generate_sparse6: [networkx]
  generate_timestamp: [panda]
  generate_tokens: [tokenize]
  generate_unique_names: [pytools]
  generate_unique_permutations: [pytools]
  generate_unique_possibilities: [pytools]
  generated_version: [theano]
  generators: [BeautifulSoup, networkx]
  generic: [theano, networkx]
  genericpath: [os.path]
  genfromtxt: [numpy]
  geographical_threshold_graph: [networkx]
  geometric: [networkx]
  get: [requests, unirest]
  getAffineTransform: [cv2]
  getAssociatedObject: [objc]
  getBB: [mftracker]
  getBBHeight: [mftracker]
  getBBWidth: [mftracker]
  getBuildInformation: [cv2]
  getCPUTickCount: [cv2]
  getClassList: [objc]
  getDefaultNewCameraMatrix: [cv2]
  getDerivKernels: [cv2]
  getFilledBBPoints: [mftracker]
  getGaborKernel: [cv2]
  getGaussianKernel: [cv2]
  getInstanceVariable: [objc]
  getMedian: [mftracker]
  getMedianUnmanaged: [mftracker]
  getNumberOfCPUs: [cv2]
  getObj: [configobj]
  getOptimalDFTSize: [cv2]
  getOptimalNewCameraMatrix: [cv2]
  getPerspectiveTransform: [cv2]
  getRectFromBB: [mftracker]
  getRectSubPix: [cv2]
  getRotationMatrix2D: [cv2]
  getStrBridgeEnabled: [objc]
  getStructuringElement: [cv2]
  getTestCaseNames: [unittest]
  getTextSize: [cv2]
  getTickCount: [cv2]
  getTickFrequency: [cv2]
  getTokensEndLoc: [pyparsing]
  getTrackbarPos: [cv2]
  getUseKVOForSetattr: [objc]
  getValidDisparityROI: [cv2]
  getVerbose: [objc]
  getWindowProperty: [cv2]
  get_anyop: [astor]
  get_array_wrap: [numpy]
  get_backend: [matplotlib]
  get_binop: [astor]
  get_boolop: [astor]
  get_cached_distribution: [rosdistro]
  get_cached_release: [rosdistro]
  get_cachedir: [matplotlib]
  get_cl_header_version: [pyopencl]
  get_cmpop: [astor]
  get_config_h_filename: [sysconfig]
  get_config_var: [sysconfig]
  get_config_vars: [sysconfig]
  get_configdir: [matplotlib]
  get_current_url: [werkzeug]
  get_data_path: [matplotlib]
  get_default_context: [pygpu]
  get_default_language: [enchant]
  get_distribution: [rosdistro]
  get_distribution_cache: [rosdistro]
  get_distribution_file: [rosdistro]
  get_doc_build_files: [rosdistro]
  get_doc_file: [rosdistro]
  get_docstring: [ast]
  get_dummies: [pandas]
  get_edge_attributes: [networkx]
  get_enchant_version: [enchant]
  get_etc_ros_dir: [rospkg]
  get_example_data: [matplotlib]
  get_extra_values: [configobj]
  get_flashed_messages: [flask]
  get_format_from_width: [pyaudio]
  get_frozen_object: [imp]
  get_function_closure: [six]
  get_function_code: [six]
  get_function_defaults: [six]
  get_function_globals: [six]
  get_home: [matplotlib]
  get_host: [werkzeug]
  get_hub: [gevent]
  get_ident: [thread]
  get_include: [numpy, lxml, opencl]
  get_includes: [zmq]
  get_index: [rosdistro]
  get_index_url: [rosdistro]
  get_init: [decorator]
  get_installed_distributions: [pip]
  get_installed_pythons: [virtualenv]
  get_level: [coloredlogs]
  get_log_dir: [rospkg]
  get_logger: [climate]
  get_magic: [imp]
  get_makefile_filename: [sysconfig]
  get_method_function: [six]
  get_method_self: [six]
  get_node_attributes: [networkx]
  get_option: [pandas]
  get_package_name: [rospkg]
  get_param: [enchant]
  get_parameters: [unirest]
  get_path: [sysconfig]
  get_path_names: [sysconfig]
  get_paths: [sysconfig]
  get_pid_list: [psutil]
  get_platform: [sysconfig]
  get_platforms: [opencl]
  get_portaudio_version: [pyaudio]
  get_portaudio_version_text: [pyaudio]
  get_printoptions: [numpy]
  get_process_list: [psutil]
  get_prog: [pip]
  get_py2exe_datafiles: [matplotlib]
  get_python_version: [sysconfig]
  get_random_fortune: [fortune]
  get_read_from_map_from_permutation: [pytools]
  get_release: [rosdistro]
  get_release_build_files: [rosdistro]
  get_release_builds: [rosdistro]
  get_release_cache: [rosdistro]
  get_release_file: [rosdistro]
  get_ros_home: [rospkg]
  get_ros_package_path: [rospkg]
  get_ros_paths: [rospkg]
  get_ros_root: [rospkg]
  get_sample_size: [pyaudio]
  get_scalar_constant_value: [theano]
  get_scheme_names: [sysconfig]
  get_similar_commands: [pip]
  get_source_build_files: [rosdistro]
  get_source_file: [rosdistro]
  get_stack_version_by_dir: [rospkg]
  get_store: [pandas]
  get_suffixes: [imp]
  get_summaries: [pip]
  get_supported_image_formats: [pyopencl]
  get_template_attribute: [flask]
  get_test_results_dir: [rospkg]
  get_unaryop: [astor]
  get_unbound_function: [six]
  get_users: [psutil]
  get_value: [ast2json]
  get_vcs_client: [vcstools]
  get_write_to_map_from_permutation: [pytools]
  getabsfile: [inspect]
  getargs: [inspect]
  getargspec: [inspect, plac]
  getargvalues: [inspect]
  getatime: [os.path]
  getblock: [inspect]
  getbuffer: [numpy]
  getbufsize: [numpy]
  getcallargs: [inspect]
  getcheckinterval: [sys]
  getclasstree: [inspect]
  getcomments: [inspect]
  getctime: [os.path]
  getcurrent: [gevent, greenlet]
  getcwd: [os]
  getcwdu: [os]
  getdecoder: [codecs]
  getdefaultencoding: [sys]
  getdlopenflags: [sys]
  getdoc: [inspect]
  getegid: [os]
  getencoder: [codecs]
  getenv: [os]
  geterr: [numpy]
  geterrcall: [numpy]
  geterrobj: [numpy]
  geteuid: [os]
  getfile: [inspect]
  getfilesystemencoding: [sys]
  getframeinfo: [inspect]
  getgid: [os]
  getgroups: [os]
  getincrementaldecoder: [codecs]
  getincrementalencoder: [codecs]
  getinnerframes: [inspect]
  getitem: [operator]
  getitimer: [signal]
  getline: [linecache]
  getlineno: [inspect]
  getlines: [linecache]
  getloadavg: [os]
  getlogin: [os]
  getmembers: [inspect]
  getmodule: [inspect]
  getmoduleinfo: [inspect]
  getmodulename: [inspect]
  getmro: [inspect]
  getmtime: [os.path]
  getopt: [shedskin]
  getouterframes: [inspect]
  getpgid: [os]
  getpgrp: [os]
  getpid: [os]
  getppid: [os]
  getprofile: [sys]
  getreader: [codecs]
  getrecursionlimit: [sys]
  getrefcount: [sys]
  getsid: [os]
  getsignal: [signal]
  getsitepackages: [site]
  getsize: [os.path]
  getsizeof: [sys]
  getslice: [operator]
  getsource: [inspect]
  getsourcefile: [inspect]
  getsourcelines: [inspect]
  gettext: [pytz]
  gettrace: [sys, greenlet]
  getuid: [os]
  getuserbase: [site]
  getusersitepackages: [site]
  getwriter: [codecs]
  gexf: [networkx]
  gil: [Cython]
  git: [pip, vcstools]
  gl: [opencl]
  glob: [virtualenv]
  global_parameters: [networkx]
  globals: [flask]
  gml: [networkx]
  gn_graph: [networkx]
  gnc_graph: [networkx]
  gnm_random_graph: [networkx]
  gnp_random_graph: [networkx]
  gnr_graph: [networkx]
  gof: [theano]
  goldberg_radzik: [networkx]
  goodFeaturesToTrack: [cv2]
  google_matrix: [networkx]
  got_request_exception: [flask]
  gpickle: [networkx]
  gpuarray: [pygpu]
  grabCut: [cv2]
  grad: [theano]
  gradient: [theano, numpy]
  graph: [networkx, shedskin, theanets]
  graph6: [networkx]
  graph_clique_number: [networkx]
  graph_number_of_cliques: [networkx]
  graphical: [networkx]
  graphics: [glumpy]
  graphmatrix: [networkx]
  graphml: [networkx]
  graphviz_layout: [networkx]
  greater: [numpy]
  greater_equal: [numpy]
  greenlet: [gevent]
  grid_2d_graph: [networkx]
  grid_graph: [networkx]
  group: [tokenize]
  groupRectangles: [cv2]
  groupby: [pandas]
  gs: [Cython]
  gt: [operator]
  gzip: [rosdistro, unirest]
  hamming: [numpy]
  hanning: [numpy]
  has: [zmq]
  has_app_context: [flask]
  has_path: [networkx]
  has_request_context: [flask]
  hascompare: [opcode]
  hasconst: [opcode]
  hasfree: [opcode]
  hash: [joblib]
  hashing: [joblib]
  hashlib: [itsdangerous, panda]
  hashtable: [pandas]
  hasjabs: [opcode]
  hasjrel: [opcode]
  haslocal: [opcode]
  hasname: [opcode]
  have_gl: [pyopencl]
  havel_hakimi_graph: [networkx]
  hconcat: [cv2]
  head: [requests]
  heapify: [heapq]
  heappop: [heapq]
  heappush: [heapq]
  heappushpop: [heapq]
  heapreplace: [heapq]
  heawood_graph: [networkx]
  helpers: [wstool, flask]
  hexdigits: [string]
  hexnums: [pyparsing]
  hexversion: [sys]
  hg: [vcstools]
  hierarchy: [networkx]
  highlight: [pygments]
  histogram: [numpy]
  histogram2d: [numpy]
  histogramdd: [numpy]
  hits: [networkx]
  hits_alg: [networkx]
  hits_numpy: [networkx]
  hits_scipy: [networkx]
  hmac: [itsdangerous, panda]
  hookimpl: [tox]
  hooks: [requests]
  hookspec: [tox]
  hookspecs: [tox]
  hostkeys: [paramiko]
  house_graph: [networkx]
  house_x_graph: [networkx]
  hsplit: [numpy]
  hstack: [numpy]
  html: [werkzeug]
  htmlComment: [pyparsing]
  http_date: [werkzeug]
  httplib: [panda]
  hub: [gevent]
  hub_matrix: [networkx]
  hybrid: [networkx]
  hypercube_graph: [networkx]
  hypot: [numpy]
  i: [scikits.audiolab]
  i0: [numpy]
  iadd: [operator]
  iand: [operator]
  iconcat: [operator]
  icosahedral_graph: [networkx]
  idct: [cv2]
  identity: [numpy]
  idft: [cv2]
  idiv: [operator]
  idle: [gevent]
  ifft: [scipy]
  ifloordiv: [operator]
  ignore_errors: [codecs]
  ilshift: [operator]
  imag: [numpy]
  image: [glumpy]
  image_from_array: [pyopencl]
  imdecode: [cv2]
  imencode: [cv2]
  imod: [operator]
  imp: [inspect]
  import_main: [plac]
  import_string: [werkzeug]
  importer: [nose]
  imread: [cv2]
  imshow: [cv2, glumpy]
  imul: [operator]
  imwrite: [cv2]
  in1d: [numpy]
  inPy3k: [mock]
  inRange: [cv2]
  in_degree_centrality: [networkx]
  incidence_matrix: [networkx]
  increase_verbosity: [coloredlogs]
  increment_lineno: [ast]
  indentedBlock: [pyparsing]
  indentsize: [inspect]
  index: [string, pandas, pip, rosdistro]
  indexOf: [operator]
  index_exp: [numpy]
  index_type: [Cython]
  indexbytes: [six]
  indices: [numpy]
  indices_in_shape: [pytools]
  inf: [numpy]
  infer: [shedskin]
  infer_freq: [pandas]
  infixNotation: [pyparsing]
  info: [numpy, networkx, pandas]
  infoForFramework: [objc]
  information_centrality: [networkx]
  infty: [numpy]
  iniconfig: [py]
  init: [colorama]
  initCameraMatrix2D: [cv2]
  initFrameworkWrapper: [objc]
  initModule_nonfree: [cv2]
  initUndistortRectifyMap: [cv2]
  initWideAngleProjMap: [cv2]
  init_builtin: [imp]
  init_frozen: [imp]
  initgroups: [os]
  initialise: [colorama]
  inject_tokens: [interpy.codec.tokenizer]
  inline: [Cython]
  inmain: [qtutils]
  inmain_decorator: [qtutils]
  inmain_later: [qtutils]
  inner: [numpy]
  inpaint: [cv2]
  inplace: [mock]
  input: [pytools]
  insert: [numpy]
  insertChannel: [cv2]
  inspect: [decorator, mock, plac]
  inspector: [nose]
  install: [coloredlogs]
  installHandler: [unittest]
  install_activate: [virtualenv]
  install_distutils: [virtualenv]
  install_python: [virtualenv]
  install_wheel: [virtualenv]
  instancemethod: [objc]
  int: [Cython]
  int2byte: [six]
  int64_sockopts: [zmq]
  int_asbuffer: [numpy]
  int_sockopts: [zmq]
  int_to_byte: [itsdangerous]
  int_to_bytes: [itsdangerous]
  int_types: [opencl, markupsafe]
  integer_types: [six]
  integral: [cv2]
  integral2: [cv2]
  integral3: [cv2]
  integrate: [scipy]
  interactive: [matplotlib]
  interactive_prompt: [humanfriendly]
  interfaces: [gensim]
  intern: [pathlib, pytools]
  internal: [Cython]
  interp: [numpy]
  interpolate: [scipy]
  interpolation_engines: [configobj]
  interpreters: [tox]
  interpy_tokenize: [interpy.codec.register]
  interpy_transform: [interpy.codec.register]
  interpy_transform_string: [interpy.codec.register]
  interpy_untokenize: [interpy.codec.register]
  interrupt_main: [thread]
  intersect1d: [numpy]
  intersectConvexConvex: [cv2]
  intersection: [networkx]
  intersection_all: [networkx]
  intersection_array: [networkx]
  inthread: [qtutils]
  inv: [operator]
  invert: [operator, numpy, cv2]
  invertAffineTransform: [cv2]
  invoke_editor: [pytools]
  invoke_in_main: [qtutils]
  io: [pandas, pathlib, py, serial, word2vec]
  io_sleep: [paramiko]
  ior: [operator]
  ip_network: [pyasn]
  ipmt: [numpy]
  ipow: [operator]
  irepeat: [operator]
  iri_to_uri: [werkzeug]
  irr: [numpy]
  irshift: [operator]
  isCallable: [operator]
  isContourConvex: [cv2]
  isMappingType: [operator]
  isNumberType: [operator]
  isSequenceType: [operator]
  is_: [operator]
  is_annotation: [plac]
  is_aperiodic: [networkx]
  is_arborescence: [networkx]
  is_attracting_component: [networkx]
  is_biconnected: [networkx]
  is_bipartite: [networkx]
  is_branching: [networkx]
  is_builtin: [imp]
  is_busday: [numpy]
  is_chordal: [networkx]
  is_connected: [networkx]
  is_cygwin: [virtualenv]
  is_darwin: [virtualenv]
  is_digraphical: [networkx]
  is_directed: [networkx]
  is_directed_acyclic_graph: [networkx]
  is_distance_regular: [networkx]
  is_dominating_set: [networkx]
  is_entity_header: [werkzeug]
  is_eulerian: [networkx]
  is_executable: [virtualenv]
  is_executable_file: [virtualenv]
  is_forest: [networkx]
  is_frozen: [imp, networkx]
  is_graphical: [networkx]
  is_hop_by_hop_header: [werkzeug]
  is_interactive: [matplotlib]
  is_isolate: [networkx]
  is_isomorphic: [networkx]
  is_jython: [virtualenv]
  is_kl_connected: [networkx]
  is_multigraphical: [networkx]
  is_not: [operator]
  is_pseudographical: [networkx]
  is_pypy: [virtualenv]
  is_python_build: [sysconfig]
  is_resource_modified: [werkzeug]
  is_semiconnected: [networkx]
  is_single_valued: [pytools]
  is_string_like: [matplotlib]
  is_strongly_connected: [networkx]
  is_text_serializer: [itsdangerous]
  is_tree: [networkx]
  is_undefined: [jinja2]
  is_url: [matplotlib]
  is_valid_degree_sequence: [networkx]
  is_valid_degree_sequence_erdos_gallai: [networkx]
  is_valid_degree_sequence_havel_hakimi: [networkx]
  is_verbose: [coloredlogs]
  is_weakly_connected: [networkx]
  is_win: [virtualenv]
  isabs: [os.path]
  isabstract: [inspect]
  isatty: [os]
  isbuiltin: [inspect]
  isclass: [inspect]
  isclose: [numpy]
  iscode: [inspect]
  iscomplex: [numpy]
  iscomplexobj: [numpy]
  isdatadescriptor: [inspect]
  isdir: [os.path]
  isfile: [os.path]
  isfinite: [numpy]
  isfortran: [numpy]
  isframe: [inspect]
  isfunction: [inspect]
  isgenerator: [inspect]
  isgeneratorfunction: [inspect]
  isgetsetdescriptor: [inspect]
  isinf: [numpy]
  iskeyword: [keyword]
  islink: [os.path]
  ismemberdescriptor: [inspect]
  ismethod: [inspect]
  ismethoddescriptor: [inspect]
  ismodule: [inspect]
  ismount: [os.path]
  isnan: [numpy]
  isneginf: [numpy]
  isnull: [pandas]
  isolate: [networkx]
  isolates: [networkx]
  isomorphism: [networkx]
  isposinf: [numpy]
  isreal: [numpy]
  isrealobj: [numpy]
  isroutine: [inspect]
  isscalar: [numpy]
  issctype: [numpy]
  issubclass_: [numpy]
  issubdtype: [numpy]
  issubsctype: [numpy]
  istraceback: [inspect]
  isub: [operator]
  iter_child_nodes: [ast]
  iter_fields: [ast]
  iter_node: [astor]
  iterable: [numpy, plac]
  iterbytes: [six]
  iterdecode: [codecs]
  iterencode: [codecs]
  iteritems: [six, markupsafe]
  iterkeys: [six]
  iterlists: [six]
  itertools: [six, funcsigs]
  itervalues: [six]
  itruediv: [operator]
  iwait: [gevent]
  ix_: [numpy]
  ixor: [operator]
  jaccard_coefficient: [networkx]
  javaStyleComment: [pyparsing]
  jid: [sleekxmpp]
  joblib: [word2vec]
  join: [os.path, string, virtualenv]
  joinall: [gevent]
  joinfields: [string]
  joinseq: [inspect]
  json: [itsdangerous, pandas, flask, unirest]
  json_available: [flask]
  jsonify: [flask]
  k_clique_communities: [networkx]
  k_core: [networkx]
  k_corona: [networkx]
  k_crust: [networkx]
  k_nearest_neighbors: [networkx]
  k_random_intersection_graph: [networkx]
  k_shell: [networkx]
  kaiser: [numpy]
  karate_club_graph: [networkx]
  katz: [networkx]
  katz_centrality: [networkx]
  katz_centrality_numpy: [networkx]
  kclique: [networkx]
  keepOriginalText: [pyparsing]
  kernel: [opencl]
  kex_gex: [paramiko]
  kex_group1: [paramiko]
  kex_group14: [paramiko]
  kex_gss: [paramiko]
  key: [matplotlib, rsa]
  keyword: [mock]
  kill: [os]
  killall: [gevent]
  killpg: [os]
  kl_connected_subgraph: [networkx]
  kmeans: [cv2]
  kosaraju_strongly_connected_components: [networkx]
  krackhardt_kite_graph: [networkx]
  kron: [numpy]
  kruskal_mst: [networkx]
  kwlist: [keyword]
  ladder_graph: [networkx]
  laplacian_matrix: [networkx]
  laplacian_spectrum: [networkx]
  laplacianmatrix: [networkx]
  latin_1_decode: [codecs]
  latin_1_encode: [codecs]
  layers: [theanets]
  layout: [networkx]
  lazy: [pytz]
  lchflags: [os]
  lchmod: [os]
  lchown: [os]
  ldexp: [numpy]
  le: [operator]
  leda: [networkx]
  left_shift: [numpy]
  len_iterable: [pytools]
  less: [numpy]
  less_equal: [numpy]
  letters: [string]
  levi_civita: [pytools]
  lex: [pygments]
  lexer: [jmespath, jinja2, mako, pygments]
  lexers: [pygments]
  lexicographic_product: [networkx]
  lexists: [os.path]
  lexsort: [numpy]
  lib: [numpy, pandas]
  lib2to3_fixer_packages: [setuptools]
  license: [grizzled]
  linalg: [numpy, networkx]
  line: [cv2, networkx]
  lineEnd: [pyparsing]
  lineStart: [pyparsing]
  line_graph: [networkx]
  linear_combination: [pytools]
  linecache: [traceback, inspect, warnings]
  lineno: [pyparsing]
  linesep: [os]
  link: [os]
  link_analysis: [networkx]
  link_prediction: [networkx]
  link_program: [pyopencl]
  linklockfile: [lockfile]
  linspace: [numpy]
  listInstanceVariables: [objc]
  list_by_path: [rospkg]
  list_dicts: [enchant]
  list_languages: [enchant]
  listdir: [os]
  literal_eval: [ast]
  little_endian: [numpy]
  ljust: [string]
  lk: [mftracker]
  lktrack: [mftracker]
  load: [yaml, numpy, joblib, networkx, pandas, word2vec]
  loadBundle: [objc]
  loadBundleFunctions: [objc]
  loadBundleVariables: [objc]
  loadFunctionList: [objc]
  loadSpecialVar: [objc]
  load_all: [yaml]
  load_centrality: [networkx]
  load_clusters: [word2vec]
  load_compiled: [imp]
  load_dynamic: [imp]
  load_ipython_extension: [Cython]
  load_module: [imp]
  load_package: [imp]
  load_source: [imp]
  load_url: [rosdistro]
  loader: [yaml, nose, rosdistro, unittest]
  loaders: [jinja2]
  loads: [numpy, execnet]
  loadtxt: [numpy]
  locale: [sphinx]
  locals: [Cython]
  locatedExpr: [pyparsing]
  locations: [pip]
  lock_held: [imp]
  locked: [lockfile]
  locking: [qtutils]
  log: [numpy, cv2, botocore, climate, py]
  log10: [numpy]
  log1p: [numpy]
  log2: [numpy]
  logaddexp: [numpy]
  logaddexp2: [numpy]
  logger: [gensim, joblib, pip, rosdistro, virtualenv]
  logging: [requests, theano, debugger, botocore, climate, coloredlogs, gensim, pip,
    rosdistro, sleekxmpp, vcstools, virtualenv]
  logging_default_formatter: [theano]
  logging_default_handler: [theano]
  logical_and: [numpy]
  logical_not: [numpy]
  logical_or: [numpy]
  logical_xor: [numpy]
  logn: [scipy]
  logspace: [numpy]
  lollipop_graph: [networkx]
  long: [Cython]
  long_info: [sys]
  longdouble: [Cython]
  longdoublecomplex: [Cython]
  longlong: [Cython]
  lookUpClass: [objc]
  lookfor: [numpy]
  lookup: [codecs]
  lookup_error: [codecs]
  lower: [string]
  lowercase: [string]
  lreshape: [pandas]
  lru_cache: [functools32]
  lseek: [os]
  lshift: [operator]
  lstat: [os]
  lstrip: [string]
  lt: [operator]
  mGet: [cv]
  mSet: [cv]
  ma: [numpy]
  mach_o_change: [virtualenv]
  mafromtxt: [numpy]
  magic_methods: [mock]
  magnitude: [cv2]
  main: [keyword, tokenize, token, fortune, pip, shedskin, theanets, virtualenv, sphinx]
  main_: [unittest2]
  major: [os]
  majver: [virtualenv]
  makeHTMLTags: [pyparsing]
  makeSuite: [unittest]
  makeXMLTags: [pyparsing]
  make_clique_bipartite: [networkx]
  make_encoding_map: [codecs]
  make_environment_relocatable: [virtualenv]
  make_exe: [virtualenv]
  make_fortune_data_file: [fortune]
  make_identity_dict: [codecs]
  make_line_iter: [werkzeug]
  make_main: [sphinx]
  make_max_clique_graph: [networkx]
  make_relative_path: [virtualenv]
  make_response: [flask]
  make_small_graph: [networkx]
  makedev: [os]
  makedict: [sre_constants]
  makedirs: [os]
  makefile: [shedskin]
  makegateway: [execnet]
  makepath: [site]
  maketrans: [string]
  manifest: [rospkg]
  manifest_provider: [rosdistro]
  map: [theano]
  markupbase: [BeautifulSoup]
  mask_indices: [numpy]
  mat: [numpy]
  matMulDeriv: [cv2]
  match: [re, pandas]
  matchOnlyAtCol: [pyparsing]
  matchPreviousExpr: [pyparsing]
  matchPreviousLiteral: [pyparsing]
  matchShapes: [cv2]
  matchTemplate: [cv2]
  match_precision: [pytools]
  match_utf8: [configobj]
  matching: [networkx]
  math: [numpy, humanfriendly, mftracker]
  matplotlib_fname: [matplotlib]
  matrixlib: [numpy]
  matutils: [gensim]
  max: [numpy, cv2]
  max_flow_min_cost: [networkx]
  max_weight_matching: [networkx]
  maximal_independent_set: [networkx]
  maximal_matching: [networkx]
  maximum: [numpy]
  maximum_flow: [networkx]
  maximum_flow_value: [networkx]
  maximum_sctype: [numpy]
  maxint: [sys, virtualenv]
  maxsize: [sys]
  maxunicode: [sys]
  may_share_memory: [numpy]
  maybe: [tokenize]
  mean: [numpy, cv2]
  meanShift: [cv2]
  meanStdDev: [cv2]
  median: [numpy, mftracker]
  medianBlur: [cv2]
  melt: [pandas]
  memoize: [pytools]
  memoize_method: [pytools]
  memoize_method_nested: [pytools]
  memoize_method_with_uncached: [pytools]
  memoize_on_first_arg: [pytools]
  memory: [joblib]
  mercurial: [pip]
  merge: [heapq, cv2, pandas]
  merge_debug_metaclass_with: [debugger]
  meshgrid: [numpy]
  message: [paramiko]
  message_flashed: [flask]
  meta_path: [sys]
  mgrid: [numpy]
  min: [numpy, cv2]
  minAreaRect: [cv2]
  minEnclosingCircle: [cv2]
  minMaxLoc: [cv2]
  min_cost_flow: [networkx]
  min_cost_flow_cost: [networkx]
  min_scalar_type: [numpy]
  minimize: [downhill]
  minimum: [numpy]
  minimum_cut: [networkx]
  minimum_cut_value: [networkx]
  minimum_edge_cut: [networkx]
  minimum_node_cut: [networkx]
  minimum_spanning_edges: [networkx]
  minimum_spanning_tree: [networkx]
  minor: [os]
  minor1: [matplotlib]
  minor2: [matplotlib]
  mintypecode: [numpy]
  minver: [virtualenv]
  mirr: [numpy]
  mis: [networkx]
  misc: [theano, astor]
  mixChannels: [cv2]
  mixing: [networkx]
  mixing_dict: [networkx]
  mkdir: [os]
  mkfifo: [os]
  mknod: [os]
  mock_open: [mock]
  mod: [operator, numpy]
  modeline: [pygments]
  models: [requests, gensim, pip]
  modf: [numpy]
  module: [flask]
  modules: [sys]
  modulesbyfile: [inspect]
  moebius_kantor_graph: [networkx]
  moments: [cv2]
  monkeypatch_class: [pytools]
  monkeypatch_method: [pytools]
  morphologyEx: [cv2]
  moveWindow: [cv2]
  moves: [six]
  msgpack: [pandas]
  msort: [numpy]
  mst: [networkx]
  msvc9_support: [setuptools]
  mul: [operator]
  mulSpectrums: [cv2]
  mulTransposed: [cv2]
  multi: [execnet]
  multidigraph: [networkx]
  multigraph: [networkx]
  multiline_adjlist: [networkx]
  multipart_encode: [unirest]
  multiply: [numpy, cv2]
  mutagen: [mutagen]
  my_decorator: [pytools]
  my_exceptions: [joblib]
  name: [os]
  name2codepoint: [BeautifulSoup]
  namedSelector: [objc]
  namedWindow: [cv2]
  namedselector: [objc]
  namedtuple: [collections, inspect]
  nan: [numpy]
  nan_to_num: [numpy]
  nanargmax: [numpy]
  nanargmin: [numpy]
  nanmax: [numpy]
  nanmean: [numpy]
  nanmedian: [numpy]
  nanmin: [numpy]
  nanpercentile: [numpy]
  nanstd: [numpy]
  nansum: [numpy]
  nanvar: [numpy]
  navigable_small_world_graph: [networkx]
  nbytes: [numpy]
  ndfromtxt: [numpy]
  ndim: [numpy]
  ndimage: [scipy]
  ne: [operator]
  neg: [operator]
  negate_tuple: [pytools]
  negative: [numpy]
  negative_edge_cycle: [networkx]
  neighbor_degree: [networkx]
  neighbors: [networkx]
  nestedExpr: [pyparsing]
  nested_iters: [numpy]
  net_connections: [psutil]
  net_io_counters: [psutil]
  network_io_counters: [psutil]
  network_simplex: [networkx]
  networkx: [networkx]
  new_module: [imp]
  newaxis: [numpy]
  newbuffer: [numpy]
  newkeys: [rsa]
  newman_watts_strogatz_graph: [networkx]
  next: [interpy.codec.utils]
  nextafter: [numpy]
  nice: [os]
  nil: [objc]
  nlargest: [heapq]
  no_gc_clear: [Cython]
  node_attribute_xy: [networkx]
  node_boundary: [networkx]
  node_clique_number: [networkx]
  node_connected_component: [networkx]
  node_connectivity: [networkx]
  node_degree_xy: [networkx]
  nodes: [yaml, networkx, jinja2]
  nodes_iter: [networkx]
  nogil: [Cython]
  non_edges: [networkx]
  non_neighbors: [networkx]
  nonzero: [numpy]
  noquot: [configobj]
  norm: [cv2]
  normCrossCorrelation: [mftracker]
  norm_1: [pytools]
  norm_2: [pytools]
  norm_inf: [pytools]
  norm_p: [pytools]
  normalize: [cv2]
  normalize_encoding: [encodings]
  normalized_laplacian_matrix: [networkx]
  normcase: [os.path]
  normpath: [os.path]
  not_: [operator]
  not_equal: [numpy]
  notnull: [pandas]
  np: [mftracker, pandas, word2vec]
  nper: [numpy]
  npv: [numpy]
  nsdata__getitem__: [objc]
  nsdata__getslice__: [objc]
  nsdata__new__: [objc]
  nsdata__str__: [objc]
  nsmallest: [heapq]
  nsmutabledata__setitem__: [objc]
  nsmutabledata__setslice__: [objc]
  nt: [pathlib]
  ntpath: [pathlib]
  nullDebugAction: [pyparsing]
  null_graph: [networkx]
  numarray: [numpy]
  number_attracting_components: [networkx]
  number_connected_components: [networkx]
  number_of_cliques: [networkx]
  number_of_edges: [networkx]
  number_of_nodes: [networkx]
  number_strongly_connected_components: [networkx]
  number_types: [itsdangerous]
  number_weakly_connected_components: [networkx]
  numeric: [Cython]
  numeric_assortativity_coefficient: [networkx]
  numeric_mixing_matrix: [networkx]
  numerics: [mock]
  numpy: [theano, glumpy, matplotlib]
  numpy_pickle: [joblib]
  numpydoc: [numpydoc]
  nums: [pyparsing]
  nx: [networkx]
  nx_agraph: [networkx]
  nx_pylab: [networkx]
  nx_shp: [networkx]
  nx_yaml: [networkx]
  obj2sctype: [numpy]
  objc: [objc]
  octahedral_graph: [networkx]
  octdigits: [string]
  offsets: [pandas]
  oggread: [scikits.audiolab]
  oggwrite: [scikits.audiolab]
  ogrid: [numpy]
  oldnumeric: [numpy]
  ols: [pandas]
  on_ros_path: [rospkg]
  once_registry: [warnings]
  onceregistry: [warnings]
  one: [pytools]
  oneOf: [pyparsing]
  ones: [numpy]
  ones_like: [numpy]
  opAssoc: [pyparsing]
  open: [os]
  open_resource: [pytz]
  openers: [pyquery]
  openpty: [os]
  operations: [pip]
  operator: [six, itsdangerous, pytools]
  operatorPrecedence: [pyparsing]
  operators: [networkx]
  opmap: [opcode]
  opname: [opcode]
  opt: [theano]
  opt_executable: [sitecustomize]
  optimize: [scipy]
  optimizer: [jinja2]
  options: [requests, pandas, objc]
  optparse: [pip, virtualenv]
  or_: [operator]
  ordered_merge: [pandas]
  originalTextFor: [pyparsing]
  original_wraps: [mock]
  other_types: [Cython]
  out_degree_centrality: [networkx]
  outer: [numpy]
  p: [sitecustomize]
  pa: [pyaudio]
  paAL: [pyaudio]
  paALSA: [pyaudio]
  paASIO: [pyaudio]
  paAbort: [pyaudio]
  paBadIODeviceCombination: [pyaudio]
  paBadStreamPtr: [pyaudio]
  paBeOS: [pyaudio]
  paBufferTooBig: [pyaudio]
  paBufferTooSmall: [pyaudio]
  paCanNotReadFromACallbackStream: [pyaudio]
  paCanNotReadFromAnOutputOnlyStream: [pyaudio]
  paCanNotWriteToACallbackStream: [pyaudio]
  paCanNotWriteToAnInputOnlyStream: [pyaudio]
  paComplete: [pyaudio]
  paContinue: [pyaudio]
  paCoreAudio: [pyaudio]
  paCustomFormat: [pyaudio]
  paDeviceUnavailable: [pyaudio]
  paDirectSound: [pyaudio]
  paFloat32: [pyaudio]
  paHostApiNotFound: [pyaudio]
  paInDevelopment: [pyaudio]
  paIncompatibleHostApiSpecificStreamInfo: [pyaudio]
  paIncompatibleStreamHostApi: [pyaudio]
  paInputOverflow: [pyaudio]
  paInputOverflowed: [pyaudio]
  paInputUnderflow: [pyaudio]
  paInsufficientMemory: [pyaudio]
  paInt16: [pyaudio]
  paInt24: [pyaudio]
  paInt32: [pyaudio]
  paInt8: [pyaudio]
  paInternalError: [pyaudio]
  paInvalidChannelCount: [pyaudio]
  paInvalidDevice: [pyaudio]
  paInvalidFlag: [pyaudio]
  paInvalidHostApi: [pyaudio]
  paInvalidSampleRate: [pyaudio]
  paJACK: [pyaudio]
  paMME: [pyaudio]
  paNoDevice: [pyaudio]
  paNoError: [pyaudio]
  paNotInitialized: [pyaudio]
  paNullCallback: [pyaudio]
  paOSS: [pyaudio]
  paOutputOverflow: [pyaudio]
  paOutputUnderflow: [pyaudio]
  paOutputUnderflowed: [pyaudio]
  paPrimingOutput: [pyaudio]
  paSampleFormatNotSupported: [pyaudio]
  paSoundManager: [pyaudio]
  paStreamIsNotStopped: [pyaudio]
  paStreamIsStopped: [pyaudio]
  paTimedOut: [pyaudio]
  paUInt8: [pyaudio]
  paUnanticipatedHostError: [pyaudio]
  paWASAPI: [pyaudio]
  paWDMKS: [pyaudio]
  package: [rosdistro]
  package_dir: [sphinx]
  packages: [requests]
  packbits: [numpy]
  packet: [paramiko]
  pad: [numpy]
  pagerank: [networkx]
  pagerank_alg: [networkx]
  pagerank_numpy: [networkx]
  pagerank_scipy: [networkx]
  pairs: [networkx]
  pajek: [networkx]
  pandas: [pandas]
  pappus_graph: [networkx]
  parallel: [joblib]
  pardir: [os]
  parse: [yaml, ast, ast2json, cssselect]
  parseBridgeSupport: [objc]
  parse_accept_header: [werkzeug]
  parse_adjlist: [networkx]
  parse_args: [climate]
  parse_argv: [docopt]
  parse_atom: [docopt]
  parse_authorization_header: [werkzeug]
  parse_cache_control_header: [werkzeug]
  parse_command_line_options: [shedskin]
  parse_config_h: [sysconfig]
  parse_cookie: [werkzeug]
  parse_date: [humanfriendly, werkzeug]
  parse_defaults: [docopt]
  parse_dict_header: [werkzeug]
  parse_edgelist: [networkx]
  parse_etags: [werkzeug]
  parse_expr: [docopt]
  parse_form_data: [werkzeug]
  !!python/unicode 'parse_gml': [networkx]
  parse_graph6: [networkx]
  parse_graphml: [networkx]
  parse_known_args: [climate]
  parse_leda: [networkx]
  parse_list_header: [werkzeug]
  parse_long: [docopt]
  parse_manifest_file: [rospkg]
  parse_multiline_adjlist: [networkx]
  parse_options_header: [werkzeug]
  parse_pajek: [networkx]
  parse_pattern: [docopt]
  parse_seq: [docopt]
  parse_set_header: [werkzeug]
  parse_shorts: [docopt]
  parse_size: [humanfriendly]
  parse_sparse6: [networkx]
  parse_www_authenticate_header: [werkzeug]
  parsefile: [astor]
  parseopts: [pip]
  parser: [yaml, cssselect, jedi, jmespath, pandas, jinja2]
  parser_from: [plac]
  parsetree: [mako]
  partition: [numpy, pytools]
  partition2: [pytools]
  patch: [requests, mock, unirest]
  patchNaNs: [cv2]
  patchable_builtin: [forbiddenfruit]
  path: [os]
  pathForFramework: [objc]
  path_graph: [networkx]
  path_hooks: [sys]
  path_importer_cache: [sys]
  path_locations: [virtualenv]
  pathconf: [os]
  pathconf_names: [os]
  pathsep: [os]
  pause: [signal]
  pconf: [plac]
  peek_path_info: [werkzeug]
  pem: [rsa]
  pep425tags: [pip]
  percentile: [numpy]
  period_range: [pandas]
  periphery: [networkx]
  perm: [pytools]
  perspectiveTransform: [cv2]
  petersen_graph: [networkx]
  phase: [cv2]
  phaseCorrelate: [cv2]
  phaseCorrelateRes: [cv2]
  phymem_usage: [psutil]
  pi: [numpy]
  pickle: [copy_reg, fortune]
  pickle_cl_vector: [opencl]
  pickle_complex: [copy_reg]
  pid_exists: [psutil]
  pids: [psutil]
  piecewise: [numpy]
  pip: [pip]
  pipe: [os]
  pivot: [pandas]
  pivot_table: [pandas]
  pkcs1: [rsa]
  pkey: [paramiko]
  pkg_resources: [altgraph, macholib, modulegraph, py2app]
  pkgload: [numpy]
  plac: [climate]
  place: [numpy]
  planted_partition_graph: [networkx]
  plat: [serial]
  platform: [sys, objc]
  play: [scikits.audiolab]
  plot_params: [pandas]
  plugin: [pygments]
  plugins: [nose, sleekxmpp]
  pluralize: [humanfriendly]
  pmt: [numpy]
  pnow: [pandas]
  pointPolygonTest: [cv2]
  pointer: [Cython]
  polarToCart: [cv2]
  poly: [numpy]
  polyadd: [numpy]
  polyder: [numpy]
  polydiv: [numpy]
  polyfit: [numpy]
  polyint: [numpy]
  polylines: [cv2]
  polymul: [numpy]
  polynomial: [numpy]
  polysub: [numpy]
  polyval: [numpy]
  pool: [joblib]
  pop_path_info: [werkzeug]
  popen: [os]
  popen2: [os]
  popen3: [os]
  popen4: [os]
  portNotOpenError: [serial]
  pos: [operator]
  posixpath: [pathlib]
  post: [requests, unirest]
  poster: [poster]
  pow: [operator, cv2]
  power: [numpy]
  powerlaw_cluster_graph: [networkx]
  pp: [theano]
  ppmt: [numpy]
  pprint: [theano, mock]
  preCornerDetect: [cv2]
  predecessor: [networkx]
  predefined_linkers: [theano]
  predefined_modes: [theano]
  predefined_optimizers: [theano]
  predictBB: [mftracker]
  preferential_attachment: [networkx]
  prefix: [sys]
  preload_module: [jedi]
  prereq: [stem]
  prim_mst: [networkx]
  prim_mst_edges: [networkx]
  prime: [rsa]
  primes: [paramiko]
  print_: [six]
  print_errors: [shedskin]
  print_exc: [traceback]
  print_exception: [traceback]
  print_function: [numpy, funcsigs, macholib, matplotlib, numpydoc, pytools, qtutils,
    rosdistro, tornado, vcstools]
  print_last: [traceback]
  print_list: [traceback]
  print_stack: [traceback]
  print_tb: [traceback]
  printable: [string]
  printable_usage: [docopt]
  printables: [pyparsing]
  printing: [theano]
  printtoken: [tokenize]
  process: [py]
  process_iter: [psutil]
  prod: [numpy]
  product: [numpy, networkx, pytools]
  program: [opencl]
  project: [networkx]
  projectPoints: [cv2]
  project_down: [networkx]
  project_up: [networkx]
  projected_graph: [networkx]
  promote_types: [numpy]
  prompt_for_choice: [humanfriendly]
  propertiesForClass: [objc]
  protocolNamed: [objc]
  protocol_handler_packages: [serial]
  protocolsForClass: [objc]
  protocolsForProcess: [objc]
  proxy: [nose, paramiko, zmq]
  pseudoprog: [tokenize]
  ptp: [numpy]
  punc8bit: [pyparsing]
  punctuation: [string]
  purge: [re]
  put: [requests, numpy, unirest]
  putText: [cv2]
  putenv: [os]
  putmask: [numpy]
  pv: [numpy]
  pwd: [psutil]
  py3compat: [paramiko]
  py3kwarning: [sys]
  py_complex: [Cython]
  py_float: [Cython]
  py_int: [Cython]
  py_long: [Cython]
  py_version: [virtualenv]
  pyasn_radix: [pyasn]
  pygen: [mako]
  pygraphviz_layout: [networkx]
  pyobjc_id: [objc]
  pyparser: [mako]
  pyparsing: [matplotlib]
  pypwl: [enchant]
  pyquery: [pyquery]
  pyrDown: [cv2]
  pyrMeanShiftFiltering: [cv2]
  pyrUp: [cv2]
  pysndfile: [scikits.audiolab]
  python: [shedskin]
  pythonStyleComment: [pyparsing]
  python_2_unicode_compatible: [six]
  pyver: [enum]
  pyversion: [nose]
  pyzmq_version: [zmq]
  pyzmq_version_info: [zmq]
  qcut: [pandas]
  qsettings_wrapper: [qtutils]
  qtlock: [qtutils]
  queue: [opencl]
  quote_etag: [werkzeug]
  quote_header_value: [werkzeug]
  quotedString: [pyparsing]
  r_: [numpy]
  ra_index_soundarajan_hopcroft: [networkx]
  rad2deg: [numpy]
  radians: [numpy]
  radius: [networkx]
  raise_from: [six]
  rand: [scipy]
  randShuffle: [cv2]
  randn: [cv2]
  randnum: [rsa]
  random: [numpy, fortune]
  random_clustered: [networkx]
  random_clustered_graph: [networkx]
  random_degree_sequence_graph: [networkx]
  random_geometric_graph: [networkx]
  random_graphs: [networkx]
  random_int: [fortune]
  random_layout: [networkx]
  random_lobster: [networkx]
  random_partition_graph: [networkx]
  random_powerlaw_tree: [networkx]
  random_powerlaw_tree_sequence: [networkx]
  random_regular_graph: [networkx]
  random_shell_graph: [networkx]
  randu: [cv2]
  rank: [numpy]
  rate: [numpy]
  ravel: [numpy]
  ravel_multi_index: [numpy]
  raw_unicode_escape_decode: [codecs]
  raw_unicode_escape_encode: [codecs]
  rc: [matplotlib]
  rcParams: [matplotlib]
  rcParamsDefault: [matplotlib]
  rcParamsOrig: [matplotlib]
  rc_file: [matplotlib]
  rc_file_defaults: [matplotlib]
  rc_params: [matplotlib]
  rc_params_from_file: [matplotlib]
  rcdefaults: [matplotlib]
  rcsetup: [matplotlib]
  re: [inspect, tokenize, debugger, BeautifulSoup, botocore, coloredlogs, configobj,
    decorator, docopt, funcsigs, humanfriendly, matplotlib, mock, pathlib, pip, plac,
    pyasn, virtualenv, markupsafe, sklearn]
  read: [os]
  read_adjlist: [networkx]
  read_clipboard: [pandas]
  read_csv: [pandas]
  read_data: [virtualenv]
  read_dot: [networkx]
  read_edgelist: [networkx]
  read_excel: [pandas]
  read_fwf: [pandas]
  read_gexf: [networkx]
  !!python/unicode 'read_gml': [networkx]
  read_gpickle: [networkx]
  read_graph6: [networkx]
  read_graphml: [networkx]
  read_hdf: [pandas]
  read_html: [pandas]
  read_json: [pandas]
  read_leda: [networkx]
  read_msgpack: [pandas]
  read_multiline_adjlist: [networkx]
  read_pajek: [networkx]
  read_pickle: [pandas]
  read_shp: [networkx]
  read_sparse6: [networkx]
  read_sql: [pandas]
  read_stata: [pandas]
  read_table: [pandas]
  read_weighted_edgelist: [networkx]
  read_yaml: [networkx]
  readbuffer_encode: [codecs]
  reader: [yaml]
  readlink: [os]
  readwrite: [networkx]
  real: [numpy]
  real_if_close: [numpy]
  realpath: [os.path]
  rec: [numpy]
  recfromcsv: [numpy]
  recfromtxt: [numpy]
  reciprocal: [numpy]
  recognition: [networkx]
  rectangle: [cv2]
  rectify3Collinear: [cv2]
  recurrent: [theanets]
  recursive_simple_cycles: [networkx]
  recycleAutoreleasePool: [objc]
  redirect: [flask, werkzeug]
  reduce: [functools, theano, cv2, functools32, pytools]
  reduction: [pygpu]
  regex: [mock]
  regexopt: [pygments]
  register: [interpy.codec, codecs]
  registerABCForClass: [objc]
  registerCFSignature: [objc]
  registerDateType: [objc]
  registerListType: [objc]
  registerMappingType: [objc]
  registerMetaDataForSelector: [objc]
  registerResult: [unittest]
  registerSetType: [objc]
  registerStructAlias: [objc]
  register_dtype: [pygpu]
  register_error: [codecs]
  register_openers: [unirest]
  register_stanza_plugin: [sleekxmpp]
  register_vcs: [vcstools]
  reinit: [colorama, gevent]
  relabel: [networkx]
  relabel_gexf_graph: [networkx]
  relabel_nodes: [networkx]
  relative_script: [virtualenv]
  relaxed_caveman_graph: [networkx]
  release: [networkx, rosdistro]
  release_build: [rosdistro]
  release_build_file: [rosdistro]
  release_cache: [rosdistro]
  release_file: [rosdistro]
  release_local: [werkzeug]
  release_lock: [imp]
  release_repository_specification: [rosdistro]
  reload: [imp]
  relpath: [os.path]
  remainder: [numpy]
  remap: [cv2]
  remove: [os]
  removeAssociatedObjects: [objc]
  removeAutoreleasePool: [objc]
  removeHandler: [unittest]
  removeQuotes: [pyparsing]
  removeResult: [unittest]
  remove_entity_headers: [werkzeug]
  remove_extension: [copy_reg]
  remove_hop_by_hop_headers: [werkzeug]
  remove_move: [six]
  removedirs: [os]
  removeduppaths: [site]
  rename: [os]
  renames: [os]
  render_template: [flask]
  render_template_string: [flask]
  repeat: [operator, numpy, cv2]
  replace: [string]
  replaceHTMLEntity: [pyparsing]
  replaceWith: [pyparsing]
  replace_errors: [codecs]
  repository: [rosdistro]
  repository_specification: [rosdistro]
  representer: [yaml]
  reprlib32: [functools32]
  reprname: [Cython]
  reprojectImageTo3D: [cv2]
  repythonify: [objc]
  req: [pip]
  request: [requests, flask]
  request_dict: [enchant]
  request_finished: [flask]
  request_pwl_dict: [enchant]
  request_started: [flask]
  request_tearing_down: [flask]
  require: [numpy]
  reraise: [six]
  reset_option: [pandas]
  resetwarnings: [warnings]
  reshape: [numpy]
  resize: [numpy, cv2]
  resizeWindow: [cv2]
  resolve_interpreter: [virtualenv]
  resolver: [yaml]
  resource: [paramiko]
  resource_allocation_index: [networkx]
  resource_exists: [pytz]
  resource_stream: [pytz]
  responder: [werkzeug]
  restOfLine: [pyparsing]
  restoredot: [numpy]
  result: [nose, tox, unittest]
  result_type: [numpy]
  returns: [Cython]
  reverse: [forbiddenfruit, networkx]
  reverse_dictionary: [pytools]
  rfind: [string]
  rich_club_coefficient: [networkx]
  richclub: [networkx]
  right: [mock]
  right_shift: [numpy]
  rindex: [string]
  rint: [numpy]
  rjust: [string]
  rmdir: [os]
  rmtree: [virtualenv]
  roles: [sphinx]
  roll: [numpy]
  rollaxis: [numpy]
  rolling_apply: [pandas]
  rolling_corr: [pandas]
  rolling_corr_pairwise: [pandas]
  rolling_count: [pandas]
  rolling_cov: [pandas]
  rolling_kurt: [pandas]
  rolling_max: [pandas]
  rolling_mean: [pandas]
  rolling_median: [pandas]
  rolling_min: [pandas]
  rolling_quantile: [pandas]
  rolling_skew: [pandas]
  rolling_std: [pandas]
  rolling_sum: [pandas]
  rolling_var: [pandas]
  rolling_window: [pandas]
  root_handler: [coloredlogs]
  roots: [numpy]
  rosdistro: [rosdistro]
  rospack: [rospkg]
  roster: [sleekxmpp]
  rot90: [numpy]
  round: [numpy]
  round_: [numpy]
  round_number: [humanfriendly]
  routing: [werkzeug]
  row_stack: [numpy]
  rsakey: [paramiko]
  rshift: [operator]
  rsplit: [string]
  rstrip: [string]
  rsync: [execnet]
  rsync_remote: [execnet]
  run: [nose]
  run_2to3_on_doctests: [setuptools]
  run_epylint: [pylint]
  run_pylint: [pylint]
  run_pylint_gui: [pylint]
  run_pyreverse: [pylint]
  run_simple: [werkzeug]
  run_symilar: [pylint]
  run_wsgi_app: [werkzeug]
  runmodule: [nose]
  runner: [unittest]
  runp: [plac]
  runtime: [jinja2, mako]
  s: [matplotlib]
  s_: [numpy]
  s_metric: [networkx]
  safe_dump: [yaml]
  safe_dump_all: [yaml]
  safe_eval: [numpy]
  safe_join: [flask]
  safe_load: [yaml]
  safe_load_all: [yaml]
  samefile: [os.path]
  sameopenfile: [os.path]
  samestat: [os.path]
  save: [numpy, pandas]
  savetxt: [numpy]
  savez: [numpy]
  savez_compressed: [numpy]
  scalar: [theano]
  scaleAdd: [cv2]
  scale_free_graph: [networkx]
  scan: [yaml, theano]
  scan_module: [theano]
  scanner: [yaml]
  scatter_matrix: [pandas]
  schar: [Cython]
  script: [werkzeug]
  scripts_interface: [word2vec]
  sctype2char: [numpy]
  sctypeDict: [numpy]
  sctypeNA: [numpy]
  sctypes: [numpy]
  sdifread: [scikits.audiolab]
  sdifwrite: [scikits.audiolab]
  search: [re, jmespath]
  search_function: [encodings]
  searchsorted: [numpy]
  secure_filename: [werkzeug]
  sedgewick_maze_graph: [networkx]
  segmentMotion: [cv2]
  select: [numpy, serial, zmq]
  selector: [nose]
  selectorFor: [objc]
  self: [mock]
  semiconnected: [networkx]
  send_file: [flask]
  send_from_directory: [flask]
  sentinel: [mock]
  sep: [os]
  sepFilter2D: [cv2]
  sequenceIncludes: [operator]
  serial_for_url: [serial]
  serialize: [yaml]
  serialize_all: [yaml]
  serializer: [yaml]
  serialposix: [serial]
  serialutil: [serial]
  server: [paramiko]
  session: [requests, tox, flask]
  sessions: [requests, flask]
  setAssociatedObject: [objc]
  setBEGINLIBPATH: [site]
  setIdentity: [cv2]
  setInstanceVariable: [objc]
  setMouseCallback: [cv2]
  setStrBridgeEnabled: [objc]
  setTrackbarPos: [cv2]
  setUseKVOForSetattr: [objc]
  setUseOptimized: [cv2]
  setVerbose: [objc]
  setWindowProperty: [cv2]
  set_debug_function: [jedi]
  set_default_context: [pygpu]
  set_edge_attributes: [networkx]
  set_eng_float_format: [pandas]
  set_level: [coloredlogs]
  set_node_attributes: [networkx]
  set_numeric_ops: [numpy]
  set_option: [pandas]
  set_param: [enchant]
  set_printoptions: [numpy]
  set_special_baudrate: [serial]
  set_string_function: [numpy]
  set_sum: [pytools]
  set_wakeup_fd: [signal]
  setbufsize: [numpy]
  setcheckinterval: [sys]
  setcopyright: [site]
  setdiff1d: [numpy]
  setdlopenflags: [sys]
  setegid: [os]
  setencoding: [site]
  seterr: [numpy]
  seterrcall: [numpy]
  seterrobj: [numpy]
  seteuid: [os]
  setgid: [os]
  setgroups: [os]
  sethelper: [site]
  setitem: [operator]
  setitimer: [signal]
  setpgid: [os]
  setpgrp: [os]
  setprofile: [sys]
  setquit: [site]
  setrecursionlimit: [sys]
  setregid: [os]
  setreuid: [os]
  setsid: [os]
  setslice: [operator]
  settings: [jedi]
  settrace: [sys, greenlet]
  setuid: [os]
  setup: [numpydoc, setuptools]
  setup_logger: [vcstools]
  setup_module: [sklearn]
  setuptools: [py2app, setuptools]
  setxor1d: [numpy]
  sftp: [paramiko]
  sftp_attr: [paramiko]
  sftp_client: [paramiko]
  sftp_file: [paramiko]
  sftp_handle: [paramiko]
  sftp_server: [paramiko]
  sftp_si: [paramiko]
  sglQuotedString: [pyparsing]
  sgmllib: [BeautifulSoup]
  shape: [numpy]
  shared: [theano]
  shell_layout: [networkx]
  shift: [pytools]
  short: [Cython]
  shortest_path: [networkx]
  shortest_path_length: [networkx]
  shortest_paths: [networkx]
  show: [glumpy]
  show_config: [numpy]
  show_numpy_config: [scipy]
  showwarning: [warnings]
  shutil: [virtualenv]
  siginterrupt: [signal]
  sign: [numpy, rsa]
  signal: [signal, psutil]
  signals: [unittest, flask]
  signals_available: [flask]
  signature: [funcsigs, objc]
  signbit: [numpy]
  similarities: [gensim]
  simple_cycles: [networkx]
  simple_paths: [networkx]
  simplefilter: [warnings]
  sin: [numpy]
  sinc: [numpy]
  single3prog: [tokenize]
  singleArgBuiltins: [pyparsing]
  single_quoted: [tokenize]
  single_source_dijkstra: [networkx]
  single_source_dijkstra_path: [networkx]
  single_source_dijkstra_path_length: [networkx]
  single_source_shortest_path: [networkx]
  single_source_shortest_path_length: [networkx]
  single_valued: [pytools]
  sinh: [numpy]
  sint: [Cython]
  site: [sitecustomize]
  site_config_dir: [rosdistro]
  six: [interpy.codec.utils, configobj, matplotlib, pytools]
  size: [numpy]
  size_t: [Cython]
  sizeof: [Cython]
  skip: [unittest]
  skipIf: [unittest]
  skipUnless: [unittest]
  sleep: [gevent]
  slong: [Cython]
  slonglong: [Cython]
  small: [networkx]
  smetric: [networkx]
  sndfile_version: [scikits.audiolab]
  social: [networkx]
  socket: [coloredlogs, lockfile]
  soft_unicode: [markupsafe]
  solve: [cv2]
  solveCubic: [cv2]
  solvePnP: [cv2]
  solvePnPRansac: [cv2]
  solvePoly: [cv2]
  sometrue: [numpy]
  sort: [numpy, cv2]
  sortIdx: [cv2]
  sort_complex: [numpy]
  soundio: [scikits.audiolab]
  source: [numpy]
  source_build_file: [rosdistro]
  source_file: [rosdistro]
  spacing: [numpy]
  sparse: [pandas]
  sparse6: [networkx]
  sparse_grad: [theano]
  spatial: [scipy]
  spawn: [gevent]
  spawn_later: [gevent]
  spawn_raw: [gevent]
  spawnl: [os]
  spawnle: [os]
  spawnlp: [os]
  spawnlpe: [os]
  spawnv: [os]
  spawnve: [os]
  spawnvp: [os]
  spawnvpe: [os]
  special: [scipy]
  spectral_layout: [networkx]
  spectral_ordering: [networkx]
  spectrum: [networkx]
  split: [os.path, string, re, numpy, cv2]
  splitSignature: [objc]
  splitStructSignature: [objc]
  splitdrive: [os.path]
  splitext: [os.path]
  splitfields: [string]
  spring_layout: [networkx]
  spsd: [mftracker]
  sqrt: [numpy, cv2]
  square: [numpy]
  square_clustering: [networkx]
  squeeze: [numpy]
  squot: [configobj]
  srange: [pyparsing]
  sre_compile: [re]
  sre_constants: [pyparsing]
  sre_parse: [re]
  ssh_exception: [paramiko]
  ssh_gss: [paramiko]
  sshort: [Cython]
  stack: [inspect, rospkg]
  stack_size: [thread]
  stanza: [sleekxmpp]
  star_graph: [networkx]
  start: [shedskin]
  startWindowThread: [cv2]
  start_new: [thread]
  start_new_thread: [thread]
  stat: [os]
  stat_float_times: [os]
  stats: [pandas]
  status: [rosdistro]
  status_codes: [requests, pip]
  statvfs: [os]
  std: [numpy, py]
  std_deviation: [pytools]
  stderr: [sys]
  stdin: [sys]
  stdout: [sys, plac]
  stem: [stem]
  stereoCalibrate: [cv2]
  stereoRectify: [cv2]
  stereoRectifyUncalibrated: [cv2]
  stochastic: [networkx]
  stochastic_graph: [networkx]
  stoer_wagner: [networkx]
  str2json: [ast2json]
  stream_with_context: [flask]
  streaminghttp: [poster]
  strerror: [os]
  strict_errors: [codecs]
  stringEnd: [pyparsing]
  stringStart: [pyparsing]
  string_histogram: [pytools]
  string_types: [six, markupsafe]
  strip: [string]
  strong_product: [networkx]
  strongly_connected: [networkx]
  strongly_connected_component_subgraphs: [networkx]
  strongly_connected_components: [networkx]
  strongly_connected_components_recursive: [networkx]
  strseq: [inspect]
  strtobool: [virtualenv]
  struct: [serial, shedskin, virtualenv]
  structures: [requests]
  style: [pygments]
  styles: [pygments]
  sub: [operator, re]
  subgraph: [networkx]
  subn: [re]
  subprocess: [matplotlib, psutil, virtualenv, word2vec]
  subst_path: [virtualenv]
  subtract: [numpy, cv2]
  subversion: [sys, pip]
  sugar: [zmq]
  suite: [nose, unittest]
  sum: [numpy]
  sumElems: [cv2]
  supported_encoding: [scikits.audiolab]
  supported_endianness: [scikits.audiolab]
  supported_format: [scikits.audiolab]
  supports_symlinks: [pathlib]
  supports_unicode_filenames: [os.path]
  svn: [vcstools]
  swap: [networkx]
  swap_memory: [psutil]
  swapaxes: [numpy]
  swapcase: [string]
  symlink: [os]
  symmetric_difference: [networkx]
  synthesize: [objc]
  sys: [os]
  sysconf: [os]
  sysconf_names: [os]
  system: [os]
  t: [tokenize]
  tabsize: [tokenize]
  take: [numpy]
  tan: [numpy]
  tanh: [numpy]
  tar: [vcstools]
  tarfile: [virtualenv]
  tb_lineno: [traceback]
  tcgetpgrp: [os]
  tcsetpgrp: [os]
  tdquot: [configobj]
  tee: [itertools]
  temp_test: [cv]
  tempfile: [matplotlib, virtualenv]
  template: [re, mako]
  template_rendered: [flask]
  templating: [flask]
  tempnam: [os]
  tensor: [theano]
  tensor_product: [networkx]
  tensordot: [numpy]
  termios: [serial]
  test: [StringIO, theano, numpy, matplotlib, networkx, opencl, psutil, py, scikits.audiolab]
  test_app: [werkzeug]
  test_assert_path_exists: [Cython]
  test_fail_if_path_exists: [Cython]
  testing: [numpy]
  tests: [theano, networkx, jinja2]
  tetrahedral_graph: [networkx]
  theano: [theano]
  theano_logger: [theano]
  thirdparty: [sleekxmpp]
  threading: [lockfile, unirest]
  threadpool: [execnet]
  threshold: [cv2, networkx]
  tile: [numpy]
  time: [debugger, coloredlogs, humanfriendly, itsdangerous, lockfile, mftracker,
    pathlib, psutil, serial, shedskin]
  time_units: [humanfriendly]
  timeout: [gevent, unirest]
  times: [os]
  timezone: [pytz]
  title: [grizzled]
  tk_window_focus: [matplotlib]
  tmp: [matplotlib]
  tmpfile: [os]
  tmpnam: [os]
  to_agraph: [networkx]
  to_bytes: [serial]
  to_datetime: [pandas]
  to_dict_of_dicts: [networkx]
  to_dict_of_lists: [networkx]
  to_edgelist: [networkx]
  to_msgpack: [pandas]
  to_networkx_graph: [networkx]
  to_numpy_matrix: [networkx]
  to_numpy_recarray: [networkx]
  to_pickle: [pandas]
  to_repr: [Cython]
  to_scipy_sparse_matrix: [networkx]
  to_source: [astor]
  to_timedelta: [pandas]
  to_uncomplex_dtype: [pytools]
  tok_name: [tokenize, token]
  token: [pygments]
  tokenize: [inspect, tokenize]
  tokenize_loop: [tokenize]
  tokenizer: [interpy.codec]
  tokenprog: [tokenize]
  tokens: [yaml]
  toolbox: [theano]
  tools: [nose, pandas]
  topological_sort: [networkx]
  topological_sort_recursive: [networkx]
  total_ordering: [functools, functools32]
  total_virtmem: [psutil]
  trace: [inspect, numpy, cv2]
  traceParseAction: [pyparsing]
  traceback: [site, debugger, shedskin]
  trackball: [glumpy]
  trainer: [theanets]
  transform: [cv2, rsa]
  transitivity: [networkx]
  translate: [string]
  transport: [paramiko]
  transpose: [numpy, cv2]
  trapz: [numpy]
  traversal: [networkx]
  tree: [networkx]
  treewalk: [astor]
  tri: [numpy]
  triangles: [networkx]
  triangulatePoints: [cv2]
  tril: [numpy]
  tril_indices: [numpy]
  tril_indices_from: [numpy]
  trim_zeros: [numpy]
  triple_quoted: [tokenize]
  triu: [numpy]
  triu_indices: [numpy]
  triu_indices_from: [numpy]
  trivial_graph: [networkx]
  true_divide: [numpy]
  truediv: [operator]
  trunc: [numpy]
  truncated_cube_graph: [networkx]
  truncated_tetrahedron_graph: [networkx]
  truth: [operator]
  tseries: [pandas]
  tslib: [pandas]
  tsquot: [configobj]
  ttyname: [os]
  tutte_graph: [networkx]
  type: [pyasn1]
  typeDict: [numpy]
  typeNA: [numpy]
  type_formats: [opencl]
  type_ordering: [Cython]
  type_version_tag: [Cython]
  typecodes: [numpy]
  typedAccessor: [objc]
  typedSelector: [objc]
  typedump: [pytools]
  typename: [numpy]
  typeof: [Cython]
  typestr: [shedskin]
  tzfile: [pytz]
  tzinfo: [pytz]
  u: [six]
  uchar: [Cython]
  ui: [wstool]
  uint: [Cython]
  uint_types: [opencl]
  ulong: [Cython]
  ulonglong: [Cython]
  umask: [os]
  uname: [os]
  unary: [networkx]
  undistort: [cv2]
  undistortPoints: [cv2]
  unescape: [werkzeug]
  ungroup: [pyparsing]
  unichr: [six, markupsafe]
  unicode: [Cython]
  unicodeString: [pyparsing]
  unicode_escape_decode: [codecs]
  unicode_escape_encode: [codecs]
  unicode_internal_decode: [codecs]
  unicode_internal_encode: [codecs]
  unicode_literals: [matplotlib, vcstools]
  uniform_interval_splitting: [pytools]
  uniform_random_intersection_graph: [networkx]
  union: [networkx]
  union1d: [numpy]
  union_all: [networkx]
  unique: [numpy, enum, pandas]
  unistring: [pygments]
  unitvec: [word2vec]
  unlink: [os]
  unload_platform_compiler: [pyopencl]
  unpackbits: [numpy]
  unpickler: [pytz]
  unquote_etag: [werkzeug]
  unquote_header_value: [werkzeug]
  unravel_index: [numpy]
  unrepr: [configobj]
  unsetenv: [os]
  untokenize: [tokenize]
  unweighted: [networkx]
  unwrap: [numpy]
  upcaseTokens: [pyparsing]
  updateMotionHistory: [cv2]
  update_wrapper: [functools, functools32]
  updatecache: [linecache]
  updates: [theano]
  upper: [string]
  uppercase: [string]
  urandom: [os]
  uri_to_iri: [werkzeug]
  url: [grizzled]
  url_decode: [werkzeug]
  url_encode: [werkzeug]
  url_fix: [werkzeug]
  url_for: [flask]
  url_quote: [werkzeug]
  url_quote_plus: [werkzeug]
  url_unquote: [werkzeug]
  url_unquote_plus: [werkzeug]
  urlescape: [panda]
  urllib: [lockfile, panda, unirest]
  urllib2: [unirest]
  urlopen: [matplotlib]
  urlquote: [pathlib]
  urlquote_from_bytes: [pathlib]
  usage: [shedskin]
  use: [matplotlib]
  useOptimized: [cv2]
  used_phymem: [psutil]
  used_virtmem: [psutil]
  user_config_dir: [rosdistro]
  user_dir: [virtualenv]
  users: [psutil]
  ushort: [Cython]
  utc: [pytz]
  utf_16_be_decode: [codecs]
  utf_16_be_encode: [codecs]
  utf_16_decode: [codecs]
  utf_16_encode: [codecs]
  utf_16_ex_decode: [codecs]
  utf_16_le_decode: [codecs]
  utf_16_le_encode: [codecs]
  utf_32_be_decode: [codecs]
  utf_32_be_encode: [codecs]
  utf_32_decode: [codecs]
  utf_32_encode: [codecs]
  utf_32_ex_decode: [codecs]
  utf_32_le_decode: [codecs]
  utf_32_le_encode: [codecs]
  utf_7_decode: [codecs]
  utf_7_encode: [codecs]
  utf_8_decode: [codecs]
  utf_8_encode: [codecs]
  util: [downhill, nose, pandas, paramiko, sleekxmpp, stem, theanets, unittest, mako,
    pygments, sphinx]
  utils: [interpy.codec, requests, theano, gensim, networkx, pip, enchant, zmq, word2vec,
    jinja2]
  utime: [os]
  v: [gunicorn]
  valid_symbol_name: [asteval]
  validate: [jsonschema]
  validateDisparity: [cv2]
  validate_arguments: [werkzeug]
  validate_backend: [matplotlib]
  validators: [jsonschema]
  value_counts: [pandas]
  value_range: [pandas]
  vander: [numpy]
  var: [numpy]
  varblock: [rsa]
  variance: [pytools]
  vconcat: [cv2]
  vcs: [pip]
  vcs_abstraction: [vcstools]
  vcs_base: [vcstools]
  vdot: [numpy]
  venv: [tox]
  verbose: [matplotlib]
  verify: [rsa]
  version_info: [sys, gevent, gunicorn, psutil, tornado, sphinx]
  version_string: [mutagen]
  view_pygraphviz: [networkx]
  viewitems: [six]
  viewkeys: [six]
  viewvalues: [six]
  virtmem_usage: [psutil]
  virtual: [shedskin]
  virtual_memory: [psutil]
  virtualenv_version: [virtualenv]
  visitor: [jinja2]
  vitality: [networkx]
  void: [Cython]
  vsplit: [numpy]
  vstack: [numpy]
  wait: [os]
  wait3: [os]
  wait4: [os]
  waitKey: [cv2]
  wait_for_events: [pyopencl]
  wait_procs: [psutil]
  waitpid: [os]
  walk: [os]
  walks: [rosdistro]
  walktree: [inspect]
  wandering_element: [pytools]
  want_bytes: [itsdangerous]
  warn: [warnings]
  warn_explicit: [warnings]
  warnings: [os.path, numpy, lockfile, matplotlib, mutagen, pip, psutil, enchant,
    objc, sklearn]
  warnoptions: [sys]
  warnpy3k: [warnings]
  warpAffine: [cv2]
  warpPerspective: [cv2]
  watershed: [cv2]
  watts_strogatz_graph: [networkx]
  wavread: [scikits.audiolab]
  wavwrite: [scikits.audiolab]
  waxman_graph: [networkx]
  weakly_connected: [networkx]
  weakly_connected_component_subgraphs: [networkx]
  weakly_connected_components: [networkx]
  weighted: [networkx]
  wheel: [pip]
  wheel_graph: [networkx]
  where: [numpy, certifi]
  whitespace: [string]
  who: [numpy]
  wide_to_long: [pandas]
  win32: [colorama]
  window: [glumpy]
  windows_support: [setuptools]
  winterm: [colorama]
  withAttribute: [pyparsing]
  with_metaclass: [six]
  with_setup: [nose]
  with_statement: [interpy.codec.register, tornado]
  with_timeout: [gevent]
  within_inter_cluster: [networkx]
  word2clusters: [word2vec]
  word2phrase: [word2vec]
  word2vec: [word2vec]
  word_wrap: [pytools]
  wordclusters: [word2vec]
  wordvectors: [word2vec]
  wrap_file: [werkzeug]
  wrappers: [flask]
  wraps: [functools, forbiddenfruit, functools32, mock]
  write: [os]
  writeTimeoutError: [serial]
  write_adjlist: [networkx]
  write_dot: [networkx]
  write_edgelist: [networkx]
  write_gexf: [networkx]
  !!python/unicode 'write_gml': [networkx]
  write_gpickle: [networkx]
  write_graph6: [networkx]
  write_graphml: [networkx]
  write_multiline_adjlist: [networkx]
  write_pajek: [networkx]
  write_shp: [networkx]
  write_sparse6: [networkx]
  write_weighted_edgelist: [networkx]
  write_yaml: [networkx]
  writefile: [virtualenv]
  wspace_plus: [configobj]
  wstool: [rosinstall]
  xform_name: [botocore]
  xhtml: [werkzeug]
  xml: [py]
  xmlcharrefreplace_errors: [codecs]
  xmlstream: [sleekxmpp]
  xor: [operator]
  xpath: [cssselect]
  xspec: [execnet]
  yaml: [rosdistro]
  zeros: [numpy]
  zeros_like: [numpy]
  zfill: [string]
  zlib: [itsdangerous, virtualenv]
  zmq_errno: [zmq]
  zmq_poll: [zmq]
  zmq_version: [zmq]
  zmq_version_info: [zmq]
